--- a/net/minecraft/server/BiomeBase.java
+++ b/net/minecraft/server/BiomeBase.java
@@ -14,19 +14,19 @@
 public abstract class BiomeBase {
 
     private static final Logger aD = LogManager.getLogger();
-    protected static final BiomeBase.BiomeTemperature a = new BiomeBase.BiomeTemperature(0.1F, 0.2F);
-    protected static final BiomeBase.BiomeTemperature b = new BiomeBase.BiomeTemperature(-0.5F, 0.0F);
-    protected static final BiomeBase.BiomeTemperature c = new BiomeBase.BiomeTemperature(-1.0F, 0.1F);
-    protected static final BiomeBase.BiomeTemperature d = new BiomeBase.BiomeTemperature(-1.8F, 0.1F);
-    protected static final BiomeBase.BiomeTemperature e = new BiomeBase.BiomeTemperature(0.125F, 0.05F);
-    protected static final BiomeBase.BiomeTemperature f = new BiomeBase.BiomeTemperature(0.2F, 0.2F);
-    protected static final BiomeBase.BiomeTemperature g = new BiomeBase.BiomeTemperature(0.45F, 0.3F);
-    protected static final BiomeBase.BiomeTemperature h = new BiomeBase.BiomeTemperature(1.5F, 0.025F);
-    protected static final BiomeBase.BiomeTemperature i = new BiomeBase.BiomeTemperature(1.0F, 0.5F);
-    protected static final BiomeBase.BiomeTemperature j = new BiomeBase.BiomeTemperature(0.0F, 0.025F);
-    protected static final BiomeBase.BiomeTemperature k = new BiomeBase.BiomeTemperature(0.1F, 0.8F);
-    protected static final BiomeBase.BiomeTemperature l = new BiomeBase.BiomeTemperature(0.2F, 0.3F);
-    protected static final BiomeBase.BiomeTemperature m = new BiomeBase.BiomeTemperature(-0.2F, 0.1F);
+    protected static final BiomeTemperature a = new BiomeTemperature(0.1F, 0.2F);
+    protected static final BiomeTemperature b = new BiomeTemperature(-0.5F, 0.0F);
+    protected static final BiomeTemperature c = new BiomeTemperature(-1.0F, 0.1F);
+    protected static final BiomeTemperature d = new BiomeTemperature(-1.8F, 0.1F);
+    protected static final BiomeTemperature e = new BiomeTemperature(0.125F, 0.05F);
+    protected static final BiomeTemperature f = new BiomeTemperature(0.2F, 0.2F);
+    protected static final BiomeTemperature g = new BiomeTemperature(0.45F, 0.3F);
+    protected static final BiomeTemperature h = new BiomeTemperature(1.5F, 0.025F);
+    protected static final BiomeTemperature i = new BiomeTemperature(1.0F, 0.5F);
+    protected static final BiomeTemperature j = new BiomeTemperature(0.0F, 0.025F);
+    protected static final BiomeTemperature k = new BiomeTemperature(0.1F, 0.8F);
+    protected static final BiomeTemperature l = new BiomeTemperature(0.2F, 0.3F);
+    protected static final BiomeTemperature m = new BiomeTemperature(-0.2F, 0.1F);
     private static final BiomeBase[] biomes = new BiomeBase[256];
     public static final Set<BiomeBase> n = Sets.newHashSet();
     public static final Map<String, BiomeBase> o = Maps.newHashMap();
@@ -86,10 +86,10 @@
     public float humidity;
     public int ar;
     public BiomeDecorator as;
-    protected List<BiomeBase.BiomeMeta> at;
-    protected List<BiomeBase.BiomeMeta> au;
-    protected List<BiomeBase.BiomeMeta> av;
-    protected List<BiomeBase.BiomeMeta> aw;
+    protected List<BiomeMeta> at;
+    protected List<BiomeMeta> au;
+    protected List<BiomeMeta> av;
+    protected List<BiomeMeta> aw;
     protected boolean ax;
     protected boolean ay;
     public final int id;
@@ -117,20 +117,20 @@
         this.id = i;
         BiomeBase.biomes[i] = this;
         this.as = this.a();
-        this.au.add(new BiomeBase.BiomeMeta(EntitySheep.class, 12, 4, 4));
-        this.au.add(new BiomeBase.BiomeMeta(EntityRabbit.class, 10, 3, 3));
-        this.au.add(new BiomeBase.BiomeMeta(EntityPig.class, 10, 4, 4));
-        this.au.add(new BiomeBase.BiomeMeta(EntityChicken.class, 10, 4, 4));
-        this.au.add(new BiomeBase.BiomeMeta(EntityCow.class, 8, 4, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntitySpider.class, 100, 4, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntityZombie.class, 100, 4, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntitySkeleton.class, 100, 4, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntityCreeper.class, 100, 4, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntitySlime.class, 100, 4, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntityEnderman.class, 10, 1, 4));
-        this.at.add(new BiomeBase.BiomeMeta(EntityWitch.class, 5, 1, 1));
-        this.av.add(new BiomeBase.BiomeMeta(EntitySquid.class, 10, 4, 4));
-        this.aw.add(new BiomeBase.BiomeMeta(EntityBat.class, 10, 8, 8));
+        this.au.add(new BiomeMeta(EntitySheep.class, 12, 4, 4));
+        this.au.add(new BiomeMeta(EntityRabbit.class, 10, 3, 3));
+        this.au.add(new BiomeMeta(EntityPig.class, 10, 4, 4));
+        this.au.add(new BiomeMeta(EntityChicken.class, 10, 4, 4));
+        this.au.add(new BiomeMeta(EntityCow.class, 8, 4, 4));
+        this.at.add(new BiomeMeta(EntitySpider.class, 100, 4, 4));
+        this.at.add(new BiomeMeta(EntityZombie.class, 100, 4, 4));
+        this.at.add(new BiomeMeta(EntitySkeleton.class, 100, 4, 4));
+        this.at.add(new BiomeMeta(EntityCreeper.class, 100, 4, 4));
+        this.at.add(new BiomeMeta(EntitySlime.class, 100, 4, 4));
+        this.at.add(new BiomeMeta(EntityEnderman.class, 10, 1, 4));
+        this.at.add(new BiomeMeta(EntityWitch.class, 5, 1, 1));
+        this.av.add(new BiomeMeta(EntitySquid.class, 10, 4, 4));
+        this.aw.add(new BiomeMeta(EntityBat.class, 10, 8, 8));
     }
 
     protected BiomeDecorator a() {
@@ -147,7 +147,7 @@
         }
     }
 
-    protected final BiomeBase a(BiomeBase.BiomeTemperature biomebase_biometemperature) {
+    protected final BiomeBase a(BiomeTemperature biomebase_biometemperature) {
         this.an = biomebase_biometemperature.a;
         this.ao = biomebase_biometemperature.b;
         return this;
@@ -206,18 +206,22 @@
         return this;
     }
 
-    public List<BiomeBase.BiomeMeta> getMobs(EnumCreatureType enumcreaturetype) {
-        switch (enumcreaturetype) {
-            case MONSTER:
-                return this.at;
-            case CREATURE:
-                return this.au;
-            case WATER_CREATURE:
-                return this.av;
-            case AMBIENT:
-                return this.aw;
-            default:
-                return Collections.emptyList();
+    public List<BiomeMeta> getMobs(EnumCreatureType enumcreaturetype) {
+        switch (SyntheticClass_1.switchMap[enumcreaturetype.ordinal()]) {
+        case 1:
+            return this.at;
+
+        case 2:
+            return this.au;
+
+        case 3:
+            return this.av;
+
+        case 4:
+            return this.aw;
+
+        default:
+            return Collections.emptyList();
         }
     }
 
@@ -274,7 +278,7 @@
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
         for (int l1 = 255; l1 >= 0; --l1) {
-            if (l1 <= random.nextInt(5)) {
+            if (l1 <= (world.paperSpigotConfig.generateFlatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
                 chunksnapshot.a(k1, l1, j1, Blocks.BEDROCK.getBlockData());
             } else {
                 IBlockData iblockdata2 = chunksnapshot.a(k1, l1, j1);
@@ -292,7 +296,7 @@
                         }
 
                         if (l1 < k && (iblockdata == null || iblockdata.getBlock().getMaterial() == Material.AIR)) {
-                            if (this.a((BlockPosition) blockposition_mutableblockposition.setValues(i, l1, j)) < 0.15F) {
+                            if (this.a((BlockPosition) blockposition_mutableblockposition.c(i, l1, j)) < 0.15F) {
                                 iblockdata = Blocks.ICE.getBlockData();
                             } else {
                                 iblockdata = Blocks.WATER.getBlockData();
@@ -339,8 +343,8 @@
         return biomebase == this ? true : (biomebase == null ? false : this.l() == biomebase.l());
     }
 
-    public BiomeBase.EnumTemperature m() {
-        return (double) this.temperature < 0.2D ? BiomeBase.EnumTemperature.COLD : ((double) this.temperature < 1.0D ? BiomeBase.EnumTemperature.MEDIUM : BiomeBase.EnumTemperature.WARM);
+    public EnumTemperature m() {
+        return (double) this.temperature < 0.2D ? EnumTemperature.COLD : ((double) this.temperature < 1.0D ? EnumTemperature.MEDIUM : EnumTemperature.WARM);
     }
 
     public static BiomeBase[] getBiomes() {
@@ -411,6 +415,38 @@
         ag = new WorldGenTallPlant();
     }
 
+    static class SyntheticClass_1 {
+
+        static final int[] switchMap = new int[EnumCreatureType.values().length];
+
+        static {
+            try {
+                SyntheticClass_1.switchMap[EnumCreatureType.MONSTER.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                SyntheticClass_1.switchMap[EnumCreatureType.CREATURE.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+            try {
+                SyntheticClass_1.switchMap[EnumCreatureType.WATER_CREATURE.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror2) {
+                ;
+            }
+
+            try {
+                SyntheticClass_1.switchMap[EnumCreatureType.AMBIENT.ordinal()] = 4;
+            } catch (NoSuchFieldError nosuchfielderror3) {
+                ;
+            }
+
+        }
+    }
+
     public static class BiomeMeta extends WeightedRandom.WeightedRandomChoice {
 
         public Class<? extends EntityInsentient> b;
@@ -439,8 +475,8 @@
             this.b = f1;
         }
 
-        public BiomeBase.BiomeTemperature a() {
-            return new BiomeBase.BiomeTemperature(this.a * 0.8F, this.b * 0.6F);
+        public BiomeTemperature a() {
+            return new BiomeTemperature(this.a * 0.8F, this.b * 0.6F);
         }
     }
 
