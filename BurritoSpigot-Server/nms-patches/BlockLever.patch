--- a/net/minecraft/server/BlockLever.java
+++ b/net/minecraft/server/BlockLever.java
@@ -2,6 +2,8 @@
 
 import java.util.Iterator;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockLever extends Block {
 
     public static final BlockStateEnum<BlockLever.EnumLeverPosition> FACING = BlockStateEnum.of("facing", BlockLever.EnumLeverPosition.class);
@@ -9,7 +11,7 @@
 
     protected BlockLever() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.NORTH).set(BlockLever.POWERED, false));
+        this.j(this.blockStateList.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.NORTH).set(BlockLever.POWERED, Boolean.valueOf(false)));
         this.a(CreativeModeTab.d);
     }
 
@@ -49,7 +51,7 @@
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        IBlockData iblockdata = this.getBlockData().set(BlockLever.POWERED, false);
+        IBlockData iblockdata = this.getBlockData().set(BlockLever.POWERED, Boolean.valueOf(false));
 
         if (a(world, blockposition, enumdirection.opposite())) {
             return iblockdata.set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(enumdirection, entityliving.getDirection()));
@@ -75,21 +77,27 @@
     }
 
     public static int a(EnumDirection enumdirection) {
-        switch (enumdirection) {
-            case DOWN:
-                return 0;
-            case UP:
-                return 5;
-            case NORTH:
-                return 4;
-            case SOUTH:
-                return 3;
-            case WEST:
-                return 2;
-            case EAST:
-                return 1;
-            default:
-                return -1;
+        switch (BlockLever.SyntheticClass_1.a[enumdirection.ordinal()]) {
+        case 1:
+            return 0;
+
+        case 2:
+            return 5;
+
+        case 3:
+            return 4;
+
+        case 4:
+            return 3;
+
+        case 5:
+            return 2;
+
+        case 6:
+            return 1;
+
+        default:
+            return -1;
         }
     }
 
@@ -114,28 +122,33 @@
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         float f = 0.1875F;
 
-        switch ((BlockLever.EnumLeverPosition) iblockaccess.getType(blockposition).get(BlockLever.FACING)) {
-            case EAST:
-                this.a(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
-                break;
-            case WEST:
-                this.a(1.0F - f * 2.0F, 0.2F, 0.5F - f, 1.0F, 0.8F, 0.5F + f);
-                break;
-            case SOUTH:
-                this.a(0.5F - f, 0.2F, 0.0F, 0.5F + f, 0.8F, f * 2.0F);
-                break;
-            case NORTH:
-                this.a(0.5F - f, 0.2F, 1.0F - f * 2.0F, 0.5F + f, 0.8F, 1.0F);
-                break;
-            case UP_Z:
-            case UP_X:
-                f = 0.25F;
-                this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.6F, 0.5F + f);
-                break;
-            case DOWN_X:
-            case DOWN_Z:
-                f = 0.25F;
-                this.a(0.5F - f, 0.4F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
+        switch (BlockLever.SyntheticClass_1.b[((BlockLever.EnumLeverPosition) iblockaccess.getType(blockposition).get(BlockLever.FACING)).ordinal()]) {
+        case 1:
+            this.a(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
+            break;
+
+        case 2:
+            this.a(1.0F - f * 2.0F, 0.2F, 0.5F - f, 1.0F, 0.8F, 0.5F + f);
+            break;
+
+        case 3:
+            this.a(0.5F - f, 0.2F, 0.0F, 0.5F + f, 0.8F, f * 2.0F);
+            break;
+
+        case 4:
+            this.a(0.5F - f, 0.2F, 1.0F - f * 2.0F, 0.5F + f, 0.8F, 1.0F);
+            break;
+
+        case 5:
+        case 6:
+            f = 0.25F;
+            this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.6F, 0.5F + f);
+            break;
+
+        case 7:
+        case 8:
+            f = 0.25F;
+            this.a(0.5F - f, 0.4F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
         }
 
     }
@@ -144,9 +157,23 @@
         if (world.isClientSide) {
             return true;
         } else {
+            // CraftBukkit start - Interact Lever
+            boolean powered = iblockdata.get(POWERED);
+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+            int old = (powered) ? 15 : 0;
+            int current = (!powered) ? 15 : 0;
+
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+            world.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
+                return true;
+            }
+            // CraftBukkit end
+            
             iblockdata = iblockdata.a(BlockLever.POWERED);
             world.setTypeAndData(blockposition, iblockdata, 3);
-            world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, (Boolean) iblockdata.get(BlockLever.POWERED) ? 0.6F : 0.5F);
+            world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0.6F : 0.5F);
             world.applyPhysics(blockposition, this);
             EnumDirection enumdirection1 = ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c();
 
@@ -156,7 +183,7 @@
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if ((Boolean) iblockdata.get(BlockLever.POWERED)) {
+        if (((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue()) {
             world.applyPhysics(blockposition, this);
             EnumDirection enumdirection = ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c();
 
@@ -167,11 +194,11 @@
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return (Boolean) iblockdata.get(BlockLever.POWERED) ? 15 : 0;
+        return ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 15 : 0;
     }
 
     public int b(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return !(Boolean) iblockdata.get(BlockLever.POWERED) ? 0 : (((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c() == enumdirection ? 15 : 0);
+        return !((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0 : (((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c() == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource() {
@@ -179,14 +206,14 @@
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(i & 7)).set(BlockLever.POWERED, (i & 8) > 0);
+        return this.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(i & 7)).set(BlockLever.POWERED, Boolean.valueOf((i & 8) > 0));
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
         int i = b0 | ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).a();
 
-        if ((Boolean) iblockdata.get(BlockLever.POWERED)) {
+        if (((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue()) {
             i |= 8;
         }
 
@@ -194,7 +221,117 @@
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[]{BlockLever.FACING, BlockLever.POWERED});
+        return new BlockStateList(this, new IBlockState[] { BlockLever.FACING, BlockLever.POWERED});
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a;
+        static final int[] b;
+        static final int[] c = new int[EnumDirection.EnumAxis.values().length];
+
+        static {
+            try {
+                BlockLever.SyntheticClass_1.c[EnumDirection.EnumAxis.X.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.c[EnumDirection.EnumAxis.Z.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+            b = new int[BlockLever.EnumLeverPosition.values().length];
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.EAST.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror2) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.WEST.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror3) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.SOUTH.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror4) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.NORTH.ordinal()] = 4;
+            } catch (NoSuchFieldError nosuchfielderror5) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.UP_Z.ordinal()] = 5;
+            } catch (NoSuchFieldError nosuchfielderror6) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.UP_X.ordinal()] = 6;
+            } catch (NoSuchFieldError nosuchfielderror7) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.DOWN_X.ordinal()] = 7;
+            } catch (NoSuchFieldError nosuchfielderror8) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.DOWN_Z.ordinal()] = 8;
+            } catch (NoSuchFieldError nosuchfielderror9) {
+                ;
+            }
+
+            a = new int[EnumDirection.values().length];
+
+            try {
+                BlockLever.SyntheticClass_1.a[EnumDirection.DOWN.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror10) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror11) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror12) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 4;
+            } catch (NoSuchFieldError nosuchfielderror13) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 5;
+            } catch (NoSuchFieldError nosuchfielderror14) {
+                ;
+            }
+
+            try {
+                BlockLever.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 6;
+            } catch (NoSuchFieldError nosuchfielderror15) {
+                ;
+            }
+
+        }
     }
 
     public static enum EnumLeverPosition implements INamable {
@@ -233,35 +370,45 @@
         }
 
         public static BlockLever.EnumLeverPosition a(EnumDirection enumdirection, EnumDirection enumdirection1) {
-            switch (enumdirection) {
-                case DOWN:
-                    switch (enumdirection1.k()) {
-                        case X:
-                            return BlockLever.EnumLeverPosition.DOWN_X;
-                        case Z:
-                            return BlockLever.EnumLeverPosition.DOWN_Z;
-                        default:
-                            throw new IllegalArgumentException("Invalid entityFacing " + enumdirection1 + " for facing " + enumdirection);
-                    }
-                case UP:
-                    switch (enumdirection1.k()) {
-                        case X:
-                            return BlockLever.EnumLeverPosition.UP_X;
-                        case Z:
-                            return BlockLever.EnumLeverPosition.UP_Z;
-                        default:
-                            throw new IllegalArgumentException("Invalid entityFacing " + enumdirection1 + " for facing " + enumdirection);
-                    }
-                case NORTH:
-                    return BlockLever.EnumLeverPosition.NORTH;
-                case SOUTH:
-                    return BlockLever.EnumLeverPosition.SOUTH;
-                case WEST:
-                    return BlockLever.EnumLeverPosition.WEST;
-                case EAST:
-                    return BlockLever.EnumLeverPosition.EAST;
+            switch (BlockLever.SyntheticClass_1.a[enumdirection.ordinal()]) {
+            case 1:
+                switch (BlockLever.SyntheticClass_1.c[enumdirection1.k().ordinal()]) {
+                case 1:
+                    return BlockLever.EnumLeverPosition.DOWN_X;
+
+                case 2:
+                    return BlockLever.EnumLeverPosition.DOWN_Z;
+
+                default:
+                    throw new IllegalArgumentException("Invalid entityFacing " + enumdirection1 + " for facing " + enumdirection);
+                }
+
+            case 2:
+                switch (BlockLever.SyntheticClass_1.c[enumdirection1.k().ordinal()]) {
+                case 1:
+                    return BlockLever.EnumLeverPosition.UP_X;
+
+                case 2:
+                    return BlockLever.EnumLeverPosition.UP_Z;
+
                 default:
-                    throw new IllegalArgumentException("Invalid facing: " + enumdirection);
+                    throw new IllegalArgumentException("Invalid entityFacing " + enumdirection1 + " for facing " + enumdirection);
+                }
+
+            case 3:
+                return BlockLever.EnumLeverPosition.NORTH;
+
+            case 4:
+                return BlockLever.EnumLeverPosition.SOUTH;
+
+            case 5:
+                return BlockLever.EnumLeverPosition.WEST;
+
+            case 6:
+                return BlockLever.EnumLeverPosition.EAST;
+
+            default:
+                throw new IllegalArgumentException("Invalid facing: " + enumdirection);
             }
         }
 
