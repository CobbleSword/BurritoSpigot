--- a/net/minecraft/server/BlockPressurePlateBinary.java
+++ b/net/minecraft/server/BlockPressurePlateBinary.java
@@ -3,6 +3,8 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
+
 public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
@@ -10,31 +12,33 @@
 
     protected BlockPressurePlateBinary(Material material, BlockPressurePlateBinary.EnumMobType blockpressureplatebinary_enummobtype) {
         super(material);
-        this.j(this.blockStateList.getBlockData().set(BlockPressurePlateBinary.POWERED, false));
+        this.j(this.blockStateList.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(false)));
         this.b = blockpressureplatebinary_enummobtype;
     }
 
     protected int e(IBlockData iblockdata) {
-        return (Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED) ? 15 : 0;
+        return ((Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED)).booleanValue() ? 15 : 0;
     }
 
     protected IBlockData a(IBlockData iblockdata, int i) {
-        return iblockdata.set(BlockPressurePlateBinary.POWERED, i > 0);
+        return iblockdata.set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(i > 0));
     }
 
     protected int f(World world, BlockPosition blockposition) {
         AxisAlignedBB axisalignedbb = this.getBoundingBox(blockposition);
         List list;
 
-        switch (this.b) {
-            case EVERYTHING:
-                list = world.getEntities((Entity) null, axisalignedbb);
-                break;
-            case MOBS:
-                list = world.a(EntityLiving.class, axisalignedbb);
-                break;
-            default:
-                return 0;
+        switch (BlockPressurePlateBinary.SyntheticClass_1.a[this.b.ordinal()]) {
+        case 1:
+            list = world.getEntities((Entity) null, axisalignedbb);
+            break;
+
+        case 2:
+            list = world.a(EntityLiving.class, axisalignedbb);
+            break;
+
+        default:
+            return 0;
         }
 
         if (!list.isEmpty()) {
@@ -43,6 +47,26 @@
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
 
+                // CraftBukkit start - Call interact event when turning on a pressure plate
+                if (this.e(world.getType(blockposition)) == 0) {
+                    org.bukkit.World bworld = world.getWorld();
+                    org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
+                    org.bukkit.event.Cancellable cancellable;
+
+                    if (entity instanceof EntityHuman) {
+                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null);
+                    } else {
+                        cancellable = new EntityInteractEvent(entity.getBukkitEntity(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
+                        manager.callEvent((EntityInteractEvent) cancellable);
+                    }
+
+                    // We only want to block turning the plate on if all events are cancelled
+                    if (cancellable.isCancelled()) {
+                        continue;
+                    }
+                }
+                // CraftBukkit end
+
                 if (!entity.aI()) {
                     return 15;
                 }
@@ -53,15 +77,35 @@
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockPressurePlateBinary.POWERED, i == 1);
+        return this.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(i == 1));
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return (Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED) ? 1 : 0;
+        return ((Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED)).booleanValue() ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[]{BlockPressurePlateBinary.POWERED});
+        return new BlockStateList(this, new IBlockState[] { BlockPressurePlateBinary.POWERED});
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a = new int[BlockPressurePlateBinary.EnumMobType.values().length];
+
+        static {
+            try {
+                BlockPressurePlateBinary.SyntheticClass_1.a[BlockPressurePlateBinary.EnumMobType.EVERYTHING.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                BlockPressurePlateBinary.SyntheticClass_1.a[BlockPressurePlateBinary.EnumMobType.MOBS.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+        }
     }
 
     public static enum EnumMobType {
