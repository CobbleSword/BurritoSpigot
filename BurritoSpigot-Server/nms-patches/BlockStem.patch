--- a/net/minecraft/server/BlockStem.java
+++ b/net/minecraft/server/BlockStem.java
@@ -4,10 +4,12 @@
 import java.util.Iterator;
 import java.util.Random;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
 
     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 7);
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", new Predicate<EnumDirection>() {
+    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", new Predicate() {
         public boolean a(EnumDirection enumdirection) {
             return enumdirection != EnumDirection.DOWN;
         }
@@ -19,7 +21,7 @@
     private final Block blockFruit;
 
     protected BlockStem(Block block) {
-        this.j(this.blockStateList.getBlockData().set(BlockStem.AGE, 0).set(BlockStem.FACING, EnumDirection.UP));
+        this.j(this.blockStateList.getBlockData().set(BlockStem.AGE, Integer.valueOf(0)).set(BlockStem.FACING, EnumDirection.UP));
         this.blockFruit = block;
         this.a(true);
         float f = 0.125F;
@@ -53,12 +55,13 @@
         if (world.getLightLevel(blockposition.up()) >= 9) {
             float f = BlockCrops.a((Block) this, world, blockposition);
 
-            if (random.nextInt((int) (25.0F / f) + 1) == 0) {
-                int i = (Integer) iblockdata.get(BlockStem.AGE);
+            if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
+                int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
 
                 if (i < 7) {
-                    iblockdata = iblockdata.set(BlockStem.AGE, i + 1);
-                    world.setTypeAndData(blockposition, iblockdata, 2);
+                    iblockdata = iblockdata.set(BlockStem.AGE, Integer.valueOf(i + 1));
+                    // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
+                    CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
                 } else {
                     Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
@@ -74,7 +77,8 @@
                     Block block = world.getType(blockposition.down()).getBlock();
 
                     if (world.getType(blockposition).getBlock().material == Material.AIR && (block == Blocks.FARMLAND || block == Blocks.DIRT || block == Blocks.GRASS)) {
-                        world.setTypeUpdate(blockposition, this.blockFruit.getBlockData());
+                        // world.setTypeUpdate(blockposition, this.blockFruit.getBlockData()); // CraftBukkit
+                        CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.blockFruit, 0); // CraftBukkit
                     }
                 }
             }
@@ -83,9 +87,10 @@
     }
 
     public void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        int i = (Integer) iblockdata.get(BlockStem.AGE) + MathHelper.nextInt(world.random, 2, 5);
+        int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue() + MathHelper.nextInt(world.random, 2, 5);
 
-        world.setTypeAndData(blockposition, iblockdata.set(BlockStem.AGE, Math.min(7, i)), 2);
+        // world.setTypeAndData(blockposition, iblockdata.set(BlockStem.AGE, Integer.valueOf(Math.min(7, i))), 2);
+        CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, Math.min(7, i)); // CraftBukkit
     }
 
     public void j() {
@@ -95,7 +100,7 @@
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        this.maxY = (double) ((float) ((Integer) iblockaccess.getType(blockposition).get(BlockStem.AGE) * 2 + 2) / 16.0F);
+        this.maxY = (double) ((float) (((Integer) iblockaccess.getType(blockposition).get(BlockStem.AGE)).intValue() * 2 + 2) / 16.0F);
         float f = 0.125F;
 
         this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, (float) this.maxY, 0.5F + f);
@@ -107,7 +112,7 @@
             Item item = this.l();
 
             if (item != null) {
-                int j = (Integer) iblockdata.get(BlockStem.AGE);
+                int j = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
 
                 for (int k = 0; k < 3; ++k) {
                     if (world.random.nextInt(15) <= j) {
@@ -128,7 +133,7 @@
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return (Integer) iblockdata.get(BlockStem.AGE) != 7;
+        return ((Integer) iblockdata.get(BlockStem.AGE)).intValue() != 7;
     }
 
     public boolean a(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
@@ -140,14 +145,14 @@
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockStem.AGE, i);
+        return this.getBlockData().set(BlockStem.AGE, Integer.valueOf(i));
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return (Integer) iblockdata.get(BlockStem.AGE);
+        return ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[]{BlockStem.AGE, BlockStem.FACING});
+        return new BlockStateList(this, new IBlockState[] { BlockStem.AGE, BlockStem.FACING});
     }
 }
