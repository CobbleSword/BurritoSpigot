--- a/net/minecraft/server/DataWatcher.java
+++ b/net/minecraft/server/DataWatcher.java
@@ -1,7 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -10,13 +10,26 @@
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.commons.lang3.ObjectUtils;
+// TacoSpigot start
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+// TacoSpigot end
 
 public class DataWatcher {
 
     private final Entity a;
     private boolean b = true;
-    private static final Map<Class<?>, Integer> c = Maps.newHashMap();
-    private final Map<Integer, DataWatcher.WatchableObject> d = Maps.newHashMap();
+    // Spigot Start
+    // TacoSpigot start - use fastutil instead of trove
+    private static final Object2IntMap<Class<?>> classToId = new Object2IntOpenHashMap(10, 0.5f);
+    private final Int2ObjectMap dataValues = new Int2ObjectOpenHashMap(10, 0.5f);
+    // These exist as an attempt at backwards compatability for (broken) NMS plugins
+    private static final Map<Class<?>, Integer> c = classToId;
+    private final Map<Integer, DataWatcher.WatchableObject> d = dataValues;
+    // TacoSpigot end
+    // Spigot End
     private boolean e;
     private ReadWriteLock f = new ReentrantReadWriteLock();
 
@@ -25,19 +38,19 @@
     }
 
     public <T> void a(int i, T t0) {
-        Integer integer = (Integer) DataWatcher.c.get(t0.getClass());
+        int integer = classToId.get(t0.getClass()); // Spigot
 
-        if (integer == null) {
+        if (integer == -1) { // Spigot
             throw new IllegalArgumentException("Unknown data type: " + t0.getClass());
         } else if (i > 31) {
             throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 31 + ")");
-        } else if (this.d.containsKey(i)) {
+        } else if (this.dataValues.containsKey(i)) { // Spigot
             throw new IllegalArgumentException("Duplicate id value for " + i + "!");
         } else {
-            DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(integer, i, t0);
+            DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(integer, i, t0); // Spigot
 
             this.f.writeLock().lock();
-            this.d.put(i, datawatcher_watchableobject);
+            this.dataValues.put(i, datawatcher_watchableobject); // Spigot
             this.f.writeLock().unlock();
             this.b = false;
         }
@@ -47,25 +60,25 @@
         DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(j, i, (Object) null);
 
         this.f.writeLock().lock();
-        this.d.put(i, datawatcher_watchableobject);
+        this.dataValues.put(i, datawatcher_watchableobject); // Spigot
         this.f.writeLock().unlock();
         this.b = false;
     }
 
     public byte getByte(int i) {
-        return (Byte) this.j(i).b();
+        return ((Byte) this.j(i).b()).byteValue();
     }
 
     public short getShort(int i) {
-        return (Short) this.j(i).b();
+        return ((Short) this.j(i).b()).shortValue();
     }
 
     public int getInt(int i) {
-        return (Integer) this.j(i).b();
+        return ((Integer) this.j(i).b()).intValue();
     }
 
     public float getFloat(int i) {
-        return (Float) this.j(i).b();
+        return ((Float) this.j(i).b()).floatValue();
     }
 
     public String getString(int i) {
@@ -82,12 +95,12 @@
         DataWatcher.WatchableObject datawatcher_watchableobject;
 
         try {
-            datawatcher_watchableobject = (DataWatcher.WatchableObject) this.d.get(i);
+            datawatcher_watchableobject = (DataWatcher.WatchableObject) this.dataValues.get(i); // Spigot
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
 
-            crashreportsystemdetails.a("Data ID", (Object) i);
+            crashreportsystemdetails.a("Data ID", (Object) Integer.valueOf(i));
             throw new ReportedException(crashreport);
         }
 
@@ -139,7 +152,7 @@
 
         if (this.e) {
             this.f.readLock().lock();
-            Iterator iterator = this.d.values().iterator();
+            Iterator iterator = this.dataValues.values().iterator(); // Spigot // TacoSpigot
 
             while (iterator.hasNext()) {
                 DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
@@ -150,6 +163,17 @@
                         arraylist = Lists.newArrayList();
                     }
 
+                   // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+                    if ( datawatcher_watchableobject.b() instanceof ItemStack )
+                    {
+                        datawatcher_watchableobject = new WatchableObject(
+                                datawatcher_watchableobject.c(),
+                                datawatcher_watchableobject.a(),
+                                ( (ItemStack) datawatcher_watchableobject.b() ).cloneItemStack()
+                        );
+                    }
+                    // Spigot end
+
                     arraylist.add(datawatcher_watchableobject);
                 }
             }
@@ -163,7 +187,7 @@
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.f.readLock().lock();
-        Iterator iterator = this.d.values().iterator();
+        Iterator iterator = this.dataValues.values().iterator(); // Spigot // TacoSpigot
 
         while (iterator.hasNext()) {
             DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
@@ -176,18 +200,26 @@
     }
 
     public List<DataWatcher.WatchableObject> c() {
-        ArrayList arraylist = null;
+        ArrayList arraylist = Lists.newArrayList(); // Spigot
 
         this.f.readLock().lock();
 
-        DataWatcher.WatchableObject datawatcher_watchableobject;
-
-        for (Iterator iterator = this.d.values().iterator(); iterator.hasNext(); arraylist.add(datawatcher_watchableobject)) {
-            datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
-            if (arraylist == null) {
-                arraylist = Lists.newArrayList();
+        arraylist.addAll(this.dataValues.values()); // Spigot // TacoSpigot
+        // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+        for ( int i = 0; i < arraylist.size(); i++ )
+        {
+            WatchableObject watchableobject = (WatchableObject) arraylist.get( i );
+            if ( watchableobject.b() instanceof ItemStack )
+            {
+                watchableobject = new WatchableObject(
+                        watchableobject.c(),
+                        watchableobject.a(),
+                        ( (ItemStack) watchableobject.b() ).cloneItemStack()
+                );
+                arraylist.set( i, watchableobject );
             }
         }
+        // Spigot end
 
         this.f.readLock().unlock();
         return arraylist;
@@ -198,39 +230,46 @@
 
         packetdataserializer.writeByte(i);
         switch (datawatcher_watchableobject.c()) {
-            case 0:
-                packetdataserializer.writeByte((Byte) datawatcher_watchableobject.b());
-                break;
-            case 1:
-                packetdataserializer.writeShort((Short) datawatcher_watchableobject.b());
-                break;
-            case 2:
-                packetdataserializer.writeInt((Integer) datawatcher_watchableobject.b());
-                break;
-            case 3:
-                packetdataserializer.writeFloat((Float) datawatcher_watchableobject.b());
-                break;
-            case 4:
-                packetdataserializer.a((String) datawatcher_watchableobject.b());
-                break;
-            case 5:
-                ItemStack itemstack = (ItemStack) datawatcher_watchableobject.b();
-
-                packetdataserializer.a(itemstack);
-                break;
-            case 6:
-                BlockPosition blockposition = (BlockPosition) datawatcher_watchableobject.b();
-
-                packetdataserializer.writeInt(blockposition.getX());
-                packetdataserializer.writeInt(blockposition.getY());
-                packetdataserializer.writeInt(blockposition.getZ());
-                break;
-            case 7:
-                Vector3f vector3f = (Vector3f) datawatcher_watchableobject.b();
-
-                packetdataserializer.writeFloat(vector3f.getX());
-                packetdataserializer.writeFloat(vector3f.getY());
-                packetdataserializer.writeFloat(vector3f.getZ());
+        case 0:
+            packetdataserializer.writeByte(((Byte) datawatcher_watchableobject.b()).byteValue());
+            break;
+
+        case 1:
+            packetdataserializer.writeShort(((Short) datawatcher_watchableobject.b()).shortValue());
+            break;
+
+        case 2:
+            packetdataserializer.writeInt(((Integer) datawatcher_watchableobject.b()).intValue());
+            break;
+
+        case 3:
+            packetdataserializer.writeFloat(((Float) datawatcher_watchableobject.b()).floatValue());
+            break;
+
+        case 4:
+            packetdataserializer.a((String) datawatcher_watchableobject.b());
+            break;
+
+        case 5:
+            ItemStack itemstack = (ItemStack) datawatcher_watchableobject.b();
+
+            packetdataserializer.a(itemstack);
+            break;
+
+        case 6:
+            BlockPosition blockposition = (BlockPosition) datawatcher_watchableobject.b();
+
+            packetdataserializer.writeInt(blockposition.getX());
+            packetdataserializer.writeInt(blockposition.getY());
+            packetdataserializer.writeInt(blockposition.getZ());
+            break;
+
+        case 7:
+            Vector3f vector3f = (Vector3f) datawatcher_watchableobject.b();
+
+            packetdataserializer.writeFloat(vector3f.getX());
+            packetdataserializer.writeFloat(vector3f.getY());
+            packetdataserializer.writeFloat(vector3f.getZ());
         }
 
     }
@@ -248,37 +287,44 @@
             DataWatcher.WatchableObject datawatcher_watchableobject = null;
 
             switch (i) {
-                case 0:
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readByte());
-                    break;
-                case 1:
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readShort());
-                    break;
-                case 2:
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readInt());
-                    break;
-                case 3:
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readFloat());
-                    break;
-                case 4:
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.c(32767));
-                    break;
-                case 5:
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.i());
-                    break;
-                case 6:
-                    int k = packetdataserializer.readInt();
-                    int l = packetdataserializer.readInt();
-                    int i1 = packetdataserializer.readInt();
-
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, new BlockPosition(k, l, i1));
-                    break;
-                case 7:
-                    float f = packetdataserializer.readFloat();
-                    float f1 = packetdataserializer.readFloat();
-                    float f2 = packetdataserializer.readFloat();
+            case 0:
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Byte.valueOf(packetdataserializer.readByte()));
+                break;
+
+            case 1:
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Short.valueOf(packetdataserializer.readShort()));
+                break;
+
+            case 2:
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Integer.valueOf(packetdataserializer.readInt()));
+                break;
+
+            case 3:
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Float.valueOf(packetdataserializer.readFloat()));
+                break;
+
+            case 4:
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.c(32767));
+                break;
+
+            case 5:
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.decodeItemStack());
+                break;
+
+            case 6:
+                int k = packetdataserializer.readInt();
+                int l = packetdataserializer.readInt();
+                int i1 = packetdataserializer.readInt();
+
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, new BlockPosition(k, l, i1));
+                break;
+
+            case 7:
+                float f = packetdataserializer.readFloat();
+                float f1 = packetdataserializer.readFloat();
+                float f2 = packetdataserializer.readFloat();
 
-                    datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, new Vector3f(f, f1, f2));
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, new Vector3f(f, f1, f2));
             }
 
             arraylist.add(datawatcher_watchableobject);
@@ -296,14 +342,16 @@
     }
 
     static {
-        DataWatcher.c.put(Byte.class, 0);
-        DataWatcher.c.put(Short.class, 1);
-        DataWatcher.c.put(Integer.class, 2);
-        DataWatcher.c.put(Float.class, 3);
-        DataWatcher.c.put(String.class, 4);
-        DataWatcher.c.put(ItemStack.class, 5);
-        DataWatcher.c.put(BlockPosition.class, 6);
-        DataWatcher.c.put(Vector3f.class, 7);
+        // Spigot Start - remove valueOf
+        classToId.put(Byte.class, 0);
+        classToId.put(Short.class, 1);
+        classToId.put(Integer.class, 2);
+        classToId.put(Float.class, 3);
+        classToId.put(String.class, 4);
+        classToId.put(ItemStack.class, 5);
+        classToId.put(BlockPosition.class, 6);
+        classToId.put(Vector3f.class, 7);
+        // Spigot End
     }
 
     public static class WatchableObject {
