--- a/net/minecraft/server/EntityFallingBlock.java
+++ b/net/minecraft/server/EntityFallingBlock.java
@@ -4,23 +4,39 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntityFallingBlock extends Entity {
 
     private IBlockData block;
     public int ticksLived;
     public boolean dropItem = true;
     private boolean e;
-    private boolean hurtEntities;
+    public boolean hurtEntities; // PAIL: private -> public
     private int fallHurtMax = 40;
     private float fallHurtAmount = 2.0F;
     public NBTTagCompound tileEntityData;
+    public org.bukkit.Location sourceLoc; // PaperSpigot
 
+    // PaperSpigot start - Add FallingBlock source location API
     public EntityFallingBlock(World world) {
+        this(null, world);
+    }
+
+    public EntityFallingBlock(org.bukkit.Location loc, World world) {
         super(world);
+        sourceLoc = loc;
+        this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
     }
 
     public EntityFallingBlock(World world, double d0, double d1, double d2, IBlockData iblockdata) {
+        this(null, world, d0, d1, d2, iblockdata);
+    }
+
+    public EntityFallingBlock(org.bukkit.Location loc, World world, double d0, double d1, double d2, IBlockData iblockdata) {
         super(world);
+        sourceLoc = loc;
+    // PaperSpigot end
         this.block = iblockdata;
         this.k = true;
         this.setSize(0.98F, 0.98F);
@@ -31,6 +47,7 @@
         this.lastX = d0;
         this.lastY = d1;
         this.lastZ = d2;
+        this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
     }
 
     protected boolean s_() {
@@ -56,8 +73,9 @@
 
             if (this.ticksLived++ == 0) {
                 blockposition = new BlockPosition(this);
-                if (this.world.getType(blockposition).getBlock() == block) {
+                if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), Blocks.AIR, 0).isCancelled()) {
                     this.world.setAir(blockposition);
+                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
                 } else if (!this.world.isClientSide) {
                     this.die();
                     return;
@@ -66,6 +84,23 @@
 
             this.motY -= 0.03999999910593033D;
             this.move(this.motX, this.motY, this.motZ);
+
+            // PaperSpigot start - Remove entities in unloaded chunks
+            if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedFallingBlocks) {
+                this.die();
+            }
+            // PaperSpigot end
+
+            // PaperSpigot start - Drop falling blocks above the specified height
+            if (this.world.paperSpigotConfig.fallingBlockHeightNerf != 0 && this.locY > this.world.paperSpigotConfig.fallingBlockHeightNerf) {
+                if (this.dropItem) {
+                    this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
+                }
+
+                this.die();
+            }
+            // PaperSpigot end
+
             this.motX *= 0.9800000190734863D;
             this.motY *= 0.9800000190734863D;
             this.motZ *= 0.9800000190734863D;
@@ -78,7 +113,13 @@
                     if (this.world.getType(blockposition).getBlock() != Blocks.PISTON_EXTENSION) {
                         this.die();
                         if (!this.e) {
-                            if (this.world.a(block, blockposition, true, EnumDirection.UP, (Entity) null, (ItemStack) null) && !BlockFalling.canFall(this.world, blockposition.down()) && this.world.setTypeAndData(blockposition, this.block, 3)) {
+                            if (this.world.a(block, blockposition, true, EnumDirection.UP, (Entity) null, (ItemStack) null) && !BlockFalling.canFall(this.world, blockposition.down()) /* mimic the false conditions of setTypeIdAndData */ && blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 && blockposition.getY() >= 0 && blockposition.getY() < (this.world.tacoSpigotConfig.disableFallingBlockStackingAt256 ? 255 : 256) && this.world.getType(blockposition) != this.block) {
+                                if (CraftEventFactory.callEntityChangeBlockEvent(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.block.getBlock(), this.block.getBlock().toLegacyData(this.block)).isCancelled()) {
+                                    return;
+                                }
+                                this.world.setTypeAndData(blockposition, this.block, 3);
+                                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                                // CraftBukkit end
                                 if (block instanceof BlockFalling) {
                                     ((BlockFalling) block).a_(this.world, blockposition);
                                 }
@@ -137,17 +178,19 @@
                 while (iterator.hasNext()) {
                     Entity entity = (Entity) iterator.next();
 
+                    CraftEventFactory.entityDamage = this; // CraftBukkit
                     entity.damageEntity(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
+                    CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
                 if (flag && (double) this.random.nextFloat() < 0.05000000074505806D + (double) i * 0.05D) {
-                    int j = (Integer) this.block.get(BlockAnvil.DAMAGE);
+                    int j = ((Integer) this.block.get(BlockAnvil.DAMAGE)).intValue();
 
                     ++j;
                     if (j > 2) {
                         this.e = true;
                     } else {
-                        this.block = this.block.set(BlockAnvil.DAMAGE, j);
+                        this.block = this.block.set(BlockAnvil.DAMAGE, Integer.valueOf(j));
                     }
                 }
             }
@@ -169,7 +212,13 @@
         if (this.tileEntityData != null) {
             nbttagcompound.set("TileEntityData", this.tileEntityData);
         }
-
+        // PaperSpigot start - Add FallingBlock source location API
+        if (sourceLoc != null) {
+            nbttagcompound.setInt("SourceLoc_x", sourceLoc.getBlockX());
+            nbttagcompound.setInt("SourceLoc_y", sourceLoc.getBlockY());
+            nbttagcompound.setInt("SourceLoc_z", sourceLoc.getBlockZ());
+        }
+        // PaperSpigot end
     }
 
     protected void a(NBTTagCompound nbttagcompound) {
@@ -205,7 +254,14 @@
         if (block == null || block.getMaterial() == Material.AIR) {
             this.block = Blocks.SAND.getBlockData();
         }
-
+        // PaperSpigot start - Add FallingBlock source location API
+        if (nbttagcompound.hasKey("SourceLoc_x")) {
+            int srcX = nbttagcompound.getInt("SourceLoc_x");
+            int srcY = nbttagcompound.getInt("SourceLoc_y");
+            int srcZ = nbttagcompound.getInt("SourceLoc_z");
+            sourceLoc = new org.bukkit.Location(world.getWorld(), srcX, srcY, srcZ);
+        }
+        // PaperSpigot end
     }
 
     public void a(boolean flag) {
@@ -217,8 +273,8 @@
         if (this.block != null) {
             Block block = this.block.getBlock();
 
-            crashreportsystemdetails.a("Immitating block ID", (Object) Block.getId(block));
-            crashreportsystemdetails.a("Immitating block data", (Object) block.toLegacyData(this.block));
+            crashreportsystemdetails.a("Immitating block ID", (Object) Integer.valueOf(Block.getId(block)));
+            crashreportsystemdetails.a("Immitating block data", (Object) Integer.valueOf(block.toLegacyData(this.block)));
         }
 
     }
@@ -226,4 +282,22 @@
     public IBlockData getBlock() {
         return this.block;
     }
+
+    // PaperSpigot start - Fix cannons
+    @Override
+    public double f(double d0, double d1, double d2) {
+        if (!world.paperSpigotConfig.fixCannons) return super.f(d0, d1, d2);
+
+        double d3 = this.locX - d0;
+        double d4 = this.locY + this.getHeadHeight() - d1;
+        double d5 = this.locZ - d2;
+
+        return (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+    }
+
+    @Override
+    public float getHeadHeight() {
+        return world.paperSpigotConfig.fixCannons ? this.length / 2 : super.getHeadHeight();
+    }
+    // PaperSpigot end
 }
