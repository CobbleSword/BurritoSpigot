--- a/net/minecraft/server/JsonList.java
+++ b/net/minecraft/server/JsonList.java
@@ -38,7 +38,7 @@
     private boolean e = true;
     private static final ParameterizedType f = new ParameterizedType() {
         public Type[] getActualTypeArguments() {
-            return new Type[]{JsonListEntry.class};
+            return new Type[] { JsonListEntry.class};
         }
 
         public Type getRawType() {
@@ -54,7 +54,7 @@
         this.c = file;
         GsonBuilder gsonbuilder = (new GsonBuilder()).setPrettyPrinting();
 
-        gsonbuilder.registerTypeHierarchyAdapter(JsonListEntry.class, new JsonList.JsonListEntrySerializer());
+        gsonbuilder.registerTypeHierarchyAdapter(JsonListEntry.class, new JsonList.JsonListEntrySerializer(null));
         this.b = gsonbuilder.create();
     }
 
@@ -83,7 +83,7 @@
 
     public V get(K k0) {
         this.h();
-        return (JsonListEntry) this.d.get(this.a(k0));
+        return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
     }
 
     public void remove(K k0) {
@@ -101,6 +101,12 @@
         return (String[]) this.d.keySet().toArray(new String[this.d.size()]);
     }
 
+    // CraftBukkit start
+    public Collection<V> getValues() {
+        return this.d.values();
+    }
+    // CraftBukkit end
+
     public boolean isEmpty() {
         return this.d.size() < 1;
     }
@@ -136,7 +142,7 @@
     }
 
     protected JsonListEntry<K> a(JsonObject jsonobject) {
-        return new JsonListEntry<>((Object) null, jsonobject);
+        return new JsonListEntry((Object) null, jsonobject);
     }
 
     protected Map<String, V> e() {
@@ -164,6 +170,17 @@
         try {
             bufferedreader = Files.newReader(this.c, Charsets.UTF_8);
             collection = (Collection) this.b.fromJson(bufferedreader, JsonList.f);
+        // Spigot Start
+        } catch ( java.io.FileNotFoundException ex )
+        {
+            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.INFO, "Unable to find file {0}, creating it.", this.c );
+        } catch ( com.google.gson.JsonSyntaxException ex )
+        {
+            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.WARNING, "Unable to read file {0}, backing it up to {0}.backup and creating new copy.", this.c );
+            File backup = new File( this.c + ".backup" );
+            this.c.renameTo( backup );
+            this.c.delete();
+        // Spigot End
         } finally {
             IOUtils.closeQuietly(bufferedreader);
         }
@@ -176,7 +193,7 @@
                 JsonListEntry jsonlistentry = (JsonListEntry) iterator.next();
 
                 if (jsonlistentry.getKey() != null) {
-                    this.d.put(this.a(jsonlistentry.getKey()), jsonlistentry);
+                    this.d.put(this.a((K) jsonlistentry.getKey()), (V) jsonlistentry); // CraftBukkit - fix decompile error
                 }
             }
         }
@@ -205,11 +222,11 @@
             }
         }
 
-        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
+        public JsonElement serialize(JsonListEntry<K> object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
             return this.a((JsonListEntry) object, type, jsonserializationcontext);
         }
 
-        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+        public JsonListEntry<K> deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - fix decompile error
             return this.a(jsonelement, type, jsondeserializationcontext);
         }
 
