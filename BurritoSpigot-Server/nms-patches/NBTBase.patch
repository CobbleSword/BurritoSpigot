--- a/net/minecraft/server/NBTBase.java
+++ b/net/minecraft/server/NBTBase.java
@@ -6,7 +6,7 @@
 
 public abstract class NBTBase {
 
-    public static final String[] a = new String[]{"END", "BYTE", "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", "BYTE[]", "STRING", "LIST", "COMPOUND", "INT[]"};
+    public static final String[] a = new String[] { "END", "BYTE", "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", "BYTE[]", "STRING", "LIST", "COMPOUND", "INT[]"};
 
     abstract void write(DataOutput dataoutput) throws IOException;
 
@@ -20,32 +20,44 @@
 
     protected static NBTBase createTag(byte b0) {
         switch (b0) {
-            case 0:
-                return new NBTTagEnd();
-            case 1:
-                return new NBTTagByte();
-            case 2:
-                return new NBTTagShort();
-            case 3:
-                return new NBTTagInt();
-            case 4:
-                return new NBTTagLong();
-            case 5:
-                return new NBTTagFloat();
-            case 6:
-                return new NBTTagDouble();
-            case 7:
-                return new NBTTagByteArray();
-            case 8:
-                return new NBTTagString();
-            case 9:
-                return new NBTTagList();
-            case 10:
-                return new NBTTagCompound();
-            case 11:
-                return new NBTTagIntArray();
-            default:
-                return null;
+        case 0:
+            return new NBTTagEnd();
+
+        case 1:
+            return new NBTTagByte();
+
+        case 2:
+            return new NBTTagShort();
+
+        case 3:
+            return new NBTTagInt();
+
+        case 4:
+            return new NBTTagLong();
+
+        case 5:
+            return new NBTTagFloat();
+
+        case 6:
+            return new NBTTagDouble();
+
+        case 7:
+            return new NBTTagByteArray();
+
+        case 8:
+            return new NBTTagString();
+
+        case 9:
+            return new NBTTagList();
+
+        case 10:
+            return new NBTTagCompound();
+
+        case 11:
+            return new NBTTagIntArray();
+
+        default:
+            return null;
         }
     }
 
