--- a/net/minecraft/server/NetworkManager.java
+++ b/net/minecraft/server/NetworkManager.java
@@ -2,6 +2,7 @@
 
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.authlib.properties.Property;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -12,6 +13,7 @@
 import io.netty.channel.local.LocalEventLoopGroup;
 import io.netty.channel.local.LocalServerChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.handler.codec.DecoderException;
 import io.netty.handler.timeout.TimeoutException;
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
@@ -26,6 +28,8 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 
 public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
@@ -33,8 +37,9 @@
     public static final Marker a = MarkerManager.getMarker("NETWORK");
     public static final Marker b = MarkerManager.getMarker("NETWORK_PACKETS", NetworkManager.a);
     public static final AttributeKey<EnumProtocol> c = AttributeKey.valueOf("protocol");
-    public static final LazyInitVar<NioEventLoopGroup> d = new LazyInitVar<NioEventLoopGroup>() {
-        protected NioEventLoopGroup a() {
+    // Burrito Start // PAIL // protected 2 public
+    public static final LazyInitVar<NioEventLoopGroup> d = new LazyInitVar() {
+        public NioEventLoopGroup a() {
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
         }
 
@@ -42,8 +47,8 @@
             return this.a();
         }
     };
-    public static final LazyInitVar<EpollEventLoopGroup> e = new LazyInitVar<EpollEventLoopGroup>() {
-        protected EpollEventLoopGroup a() {
+    public static final LazyInitVar<EpollEventLoopGroup> e = new LazyInitVar() {
+        public EpollEventLoopGroup a() {
             return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
         }
 
@@ -51,8 +56,8 @@
             return this.a();
         }
     };
-    public static final LazyInitVar<LocalEventLoopGroup> f = new LazyInitVar<LocalEventLoopGroup>() {
-        protected LocalEventLoopGroup a() {
+    public static final LazyInitVar<LocalEventLoopGroup> f = new LazyInitVar() {
+        public LocalEventLoopGroup a() {
             return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
         }
 
@@ -64,11 +69,18 @@
     private final Queue<NetworkManager.QueuedPacket> i = Queues.newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock j = new ReentrantReadWriteLock();
     public Channel channel;
-    private SocketAddress l;
-    private PacketListener m;
-    private IChatBaseComponent n;
-    private boolean o;
-    private boolean p;
+    // Spigot Start // PAIL
+    public SocketAddress l;
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
+    public PacketListener m;
+    public IChatBaseComponent n;
+    // Burrito Start // PAIL
+    public boolean o; public boolean isEncrypted = this.o;
+    public boolean p; public boolean isDisconnectionHandled =this.p;
+    // Burrito End
 
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
@@ -78,6 +90,9 @@
         super.channelActive(channelhandlercontext);
         this.channel = channelhandlercontext.channel();
         this.l = this.channel.remoteAddress();
+        // Spigot Start
+        this.preparing = false;
+        // Spigot End
 
         try {
             this.a(EnumProtocol.HANDSHAKING);
@@ -90,7 +105,7 @@
     public void a(EnumProtocol enumprotocol) {
         this.channel.attr(NetworkManager.c).set(enumprotocol);
         this.channel.config().setAutoRead(true);
-        NetworkManager.g.debug("Enabled auto read");
+//        NetworkManager.g.debug("Enabled auto read");
     }
 
     public void channelInactive(ChannelHandlerContext channelhandlercontext) throws Exception {
@@ -103,10 +118,11 @@
         if (throwable instanceof TimeoutException) {
             chatmessage = new ChatMessage("disconnect.timeout", new Object[0]);
         } else {
-            chatmessage = new ChatMessage("disconnect.genericReason", new Object[]{"Internal Exception: " + throwable});
+            chatmessage = new ChatMessage("disconnect.genericReason", new Object[] { "Internal Exception: " + throwable});
         }
 
         this.close(chatmessage);
+//        if (MinecraftServer.getServer().isDebugging()) throwable.printStackTrace(); // Spigot
     }
 
     protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) throws Exception {
@@ -122,7 +138,7 @@
 
     public void a(PacketListener packetlistener) {
         Validate.notNull(packetlistener, "packetListener", new Object[0]);
-        NetworkManager.g.debug("Set listener of {} to {}", new Object[]{this, packetlistener});
+//        NetworkManager.g.debug("Set listener of {} to {}", new Object[] { this, packetlistener});
         this.m = packetlistener;
     }
 
@@ -163,7 +179,7 @@
         final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
 
         if (enumprotocol1 != enumprotocol) {
-            NetworkManager.g.debug("Disabled auto read");
+//            NetworkManager.g.debug("Disabled auto read");
             this.channel.config().setAutoRead(false);
         }
 
@@ -186,13 +202,13 @@
                         NetworkManager.this.a(enumprotocol);
                     }
 
-                    ChannelFuture channelfuture1 = NetworkManager.this.channel.writeAndFlush(packet);
+                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
 
                     if (agenericfuturelistener != null) {
-                        channelfuture1.addListeners(agenericfuturelistener);
+                        channelfuture.addListeners(agenericfuturelistener);
                     }
 
-                    channelfuture1.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                    channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
                 }
             });
         }
@@ -210,7 +226,7 @@
                     this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
                 }
             } finally {
-                this.j.readLock().unlock();
+                 this.j.readLock().unlock();
             }
 
         }
@@ -230,8 +246,11 @@
     }
 
     public void close(IChatBaseComponent ichatbasecomponent) {
+        // Spigot Start
+        this.preparing = false;
+        // Spigot End
         if (this.channel.isOpen()) {
-            this.channel.close().awaitUninterruptibly();
+            this.channel.close(); // We can't wait as this may be called from an event loop.
             this.n = ichatbasecomponent;
         }
 
@@ -301,6 +320,7 @@
                 } else if (this.getPacketListener() != null) {
                     this.getPacketListener().a(new ChatComponentText("Disconnected"));
                 }
+                this.i.clear(); // Free up packet queue.
             } else {
                 NetworkManager.g.warn("handleDisconnection() called twice");
             }
@@ -308,7 +328,7 @@
         }
     }
 
-    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Object object) throws Exception {
+    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Packet object) throws Exception { // CraftBukkit - fix decompile error
         this.a(channelhandlercontext, (Packet) object);
     }
 
@@ -322,4 +342,11 @@
             this.b = agenericfuturelistener;
         }
     }
+
+    // Spigot Start
+    public SocketAddress getRawAddress()
+    {
+        return this.channel.remoteAddress();
+    }
+    // Spigot End
 }
