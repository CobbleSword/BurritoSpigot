--- a/net/minecraft/server/PacketDataSerializer.java
+++ b/net/minecraft/server/PacketDataSerializer.java
@@ -8,6 +8,7 @@
 import io.netty.buffer.ByteBufProcessor;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
+import io.netty.util.ByteProcessor;
 import io.netty.util.ReferenceCounted;
 import java.io.DataInput;
 import java.io.DataOutput;
@@ -16,16 +17,36 @@
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
+import java.nio.channels.FileChannel;
 import java.nio.channels.GatheringByteChannel;
 import java.nio.channels.ScatteringByteChannel;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.UUID;
 
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
+// TacoSpigot start
+import net.techcable.tacospigot.CompatHacks;
+// TacoSpigot end
+
 public class PacketDataSerializer extends ByteBuf {
 
     private final ByteBuf a;
 
+    // TacoSpigot start
+    private final boolean allowLargePackets;
     public PacketDataSerializer(ByteBuf bytebuf) {
+        /*
+         * By default, we limit the size of the received byte array to Short.MAX_VALUE, which is 31 KB.
+         * However, we make an exception when ProtocolSupport is installed, to allow 1.7 clients to work,
+         * and limit them to 31 MEGABYTES as they seem to need to send larger packets sometimes.
+         * Although a 31 MB limit leaves the server slightly vulnerable,
+         * it's still much better than the old system of having no limit,
+         * which would leave the server vulnerable to packets up to 2 GIGABYTES in size.
+         */
+        this.allowLargePackets = CompatHacks.hasProtocolSupport();
+        // TacoSpigot end
         this.a = bytebuf;
     }
 
@@ -44,9 +65,20 @@
         this.writeBytes(abyte);
     }
 
+    // TacoSpigot start
+    private static final int DEFAULT_LIMIT = Short.MAX_VALUE;
+    private static final int LARGE_PACKET_LIMIT = Short.MAX_VALUE * 1024;
     public byte[] a() {
-        byte[] abyte = new byte[this.e()];
+        // TacoSpigot start
+        int limit = allowLargePackets ? LARGE_PACKET_LIMIT : DEFAULT_LIMIT;
+        return readByteArray(limit);
+    }
 
+    public byte[] readByteArray(int limit) {
+        int len = this.e();
+        if (len > limit) throw new DecoderException("The received a byte array longer than allowed " + len + " > " + limit);
+        byte[] abyte = new byte[len];
+        // TacoSpigot end
         this.readBytes(abyte);
         return abyte;
     }
@@ -68,7 +100,7 @@
     }
 
     public <T extends Enum<T>> T a(Class<T> oclass) {
-        return ((Enum[]) oclass.getEnumConstants())[this.e()];
+        return ((T[]) oclass.getEnumConstants())[this.e()]; // CraftBukkit - fix decompile error
     }
 
     public void a(Enum<?> oenum) {
@@ -76,36 +108,28 @@
     }
 
     public int e() {
+        byte b0;
         int i = 0;
         int j = 0;
-
-        byte b0;
-
         do {
-            b0 = this.readByte();
-            i |= (b0 & 127) << j++ * 7;
-            if (j > 5) {
+            b0 = readByte();
+            i |= (b0 & Byte.MAX_VALUE) << j++ * 7;
+            if (j > 5)
                 throw new RuntimeException("VarInt too big");
-            }
-        } while ((b0 & 128) == 128);
-
+        } while ((b0 & 0x80) == 128);
         return i;
     }
 
     public long f() {
+        byte b0;
         long i = 0L;
         int j = 0;
-
-        byte b0;
-
         do {
-            b0 = this.readByte();
-            i |= (long) (b0 & 127) << j++ * 7;
-            if (j > 10) {
+            b0 = readByte();
+            i |= (b0 & Byte.MAX_VALUE) << j++ * 7;
+            if (j > 10)
                 throw new RuntimeException("VarLong too big");
-            }
-        } while ((b0 & 128) == 128);
-
+        } while ((b0 & 0x80) == 128);
         return i;
     }
 
@@ -142,14 +166,16 @@
         } else {
             try {
                 NBTCompressedStreamTools.a(nbttagcompound, (DataOutput) (new ByteBufOutputStream(this)));
-            } catch (IOException ioexception) {
+            } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
                 throw new EncoderException(ioexception);
             }
         }
 
     }
 
-    public NBTTagCompound h() throws IOException {
+    public NBTTagCompound h() throws IOException
+    {
+
         int i = this.readerIndex();
         byte b0 = this.readByte();
 
@@ -157,12 +183,16 @@
             return null;
         } else {
             this.readerIndex(i);
-            return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(2097152L));
+            try {
+                return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(50000L));
+            } catch (IOException ioexception) {
+                throw new EncoderException(ioexception);
+            }
         }
     }
 
     public void a(ItemStack itemstack) {
-        if (itemstack == null) {
+        if (itemstack == null || itemstack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeShort(-1);
         } else {
             this.writeShort(Item.getId(itemstack.getItem()));
@@ -171,6 +201,10 @@
             NBTTagCompound nbttagcompound = null;
 
             if (itemstack.getItem().usesDurability() || itemstack.getItem().p()) {
+                // Spigot start - filter
+                itemstack = itemstack.cloneItemStack();
+                CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
+                // Spigot end
                 nbttagcompound = itemstack.getTag();
             }
 
@@ -179,37 +213,44 @@
 
     }
 
-    public ItemStack i() throws IOException {
+    public ItemStack i() throws IOException
+    {
+        return this.decodeItemStack();
+    }
+
+    public ItemStack decodeItemStack() throws IOException
+    {
         ItemStack itemstack = null;
-        short short0 = this.readShort();
+        short itemId = this.readShort();
 
-        if (short0 >= 0) {
-            byte b0 = this.readByte();
-            short short1 = this.readShort();
+        if (itemId >= 0)
+        {
+            byte amount = this.readByte();
+            short data = this.readShort();
 
-            itemstack = new ItemStack(Item.getById(short0), b0, short1);
+            itemstack = new ItemStack(Item.getById(itemId), amount, data);
             itemstack.setTag(this.h());
+            // CraftBukkit start
+            if (itemstack.getTag() != null)
+            {
+                CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
+            }
+            // CraftBukkit end
         }
-
         return itemstack;
     }
 
     public String c(int i) {
         int j = this.e();
-
-        if (j > i * 4) {
-            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + j + " > " + i * 4 + ")");
-        } else if (j < 0) {
+        if (j > i * 4)
+            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + j + " > " + (i * 4) + ")");
+        if (j < 0)
             throw new DecoderException("The received encoded string buffer length is less than zero! Weird string!");
-        } else {
-            String s = new String(this.readBytes(j).array(), Charsets.UTF_8);
-
-            if (s.length() > i) {
-                throw new DecoderException("The received string length is longer than maximum allowed (" + j + " > " + i + ")");
-            } else {
-                return s;
-            }
-        }
+        String s = toString(readerIndex(), j, StandardCharsets.UTF_8);
+        readerIndex(readerIndex() + j);
+        if (s.length() > i)
+            throw new DecoderException("The received string length is longer than maximum allowed (" + j + " > " + i + ")");
+        return s;
     }
 
     public PacketDataSerializer a(String s) {
@@ -256,6 +297,14 @@
         return this.a.isDirect();
     }
 
+    public boolean isReadOnly() {
+        return this.a.isReadOnly();
+    }
+
+    public ByteBuf asReadOnly() {
+        return this.a.asReadOnly();
+    }
+
     public int readerIndex() {
         return this.a.readerIndex();
     }
@@ -356,26 +405,54 @@
         return this.a.getShort(i);
     }
 
+    public short getShortLE(int i) {
+        return this.a.getShortLE(i);
+    }
+
     public int getUnsignedShort(int i) {
         return this.a.getUnsignedShort(i);
     }
 
+    public int getUnsignedShortLE(int i) {
+        return this.a.getUnsignedShortLE(i);
+    }
+
     public int getMedium(int i) {
         return this.a.getMedium(i);
     }
 
+    public int getMediumLE(int i) {
+        return this.a.getMediumLE(i);
+    }
+
     public int getUnsignedMedium(int i) {
         return this.a.getUnsignedMedium(i);
     }
 
+    public int getUnsignedMediumLE(int i) {
+        return this.a.getUnsignedMediumLE(i);
+    }
+
     public int getInt(int i) {
         return this.a.getInt(i);
     }
 
+    public int getIntLE(int i) {
+        return this.a.getIntLE(i);
+    }
+
     public long getUnsignedInt(int i) {
         return this.a.getUnsignedInt(i);
     }
 
+    public long getUnsignedIntLE(int i) {
+        return this.a.getUnsignedIntLE(i);
+    }
+
+    public long getLongLE(int i) {
+        return this.a.getLongLE(i);
+    }
+
     public long getLong(int i) {
         return this.a.getLong(i);
     }
@@ -424,6 +501,16 @@
         return this.a.getBytes(i, gatheringbytechannel, j);
     }
 
+    @Override
+    public int getBytes(int i, FileChannel fileChannel, long l, int i1) throws IOException {
+        return this.a.getBytes(i, fileChannel, l, i1);
+    }
+
+    @Override
+    public CharSequence getCharSequence(int i, int j, Charset charset) {
+        return this.a.getCharSequence(i, j, charset);
+    }
+
     public ByteBuf setBoolean(int i, boolean flag) {
         return this.a.setBoolean(i, flag);
     }
@@ -436,18 +523,38 @@
         return this.a.setShort(i, j);
     }
 
+    @Override
+    public ByteBuf setShortLE(int i, int j) {
+        return this.a.setShortLE(i, j);
+    }
+
     public ByteBuf setMedium(int i, int j) {
         return this.a.setMedium(i, j);
     }
 
+    @Override
+    public ByteBuf setMediumLE(int i, int j) {
+        return this.a.setMediumLE(i, j);
+    }
+
     public ByteBuf setInt(int i, int j) {
         return this.a.setInt(i, j);
     }
 
+    @Override
+    public ByteBuf setIntLE(int i, int j) {
+        return this.a.setIntLE(i, j);
+    }
+
     public ByteBuf setLong(int i, long j) {
         return this.a.setLong(i, j);
     }
 
+    @Override
+    public ByteBuf setLongLE(int i, long j) {
+        return this.a.setLongLE(i, j);
+    }
+
     public ByteBuf setChar(int i, int j) {
         return this.a.setChar(i, j);
     }
@@ -492,10 +599,20 @@
         return this.a.setBytes(i, scatteringbytechannel, j);
     }
 
+    @Override
+    public int setBytes(int i, FileChannel filechannel, long j, int k) throws IOException {
+        return this.a.setBytes(i, filechannel, j, k);
+    }
+
     public ByteBuf setZero(int i, int j) {
         return this.a.setZero(i, j);
     }
 
+    @Override
+    public int setCharSequence(int i, CharSequence charsequence, Charset charset) {
+        return this.a.setCharSequence(i, charsequence, charset);
+    }
+
     public boolean readBoolean() {
         return this.a.readBoolean();
     }
@@ -512,30 +629,65 @@
         return this.a.readShort();
     }
 
+    @Override
+    public short readShortLE() {
+        return this.a.readShortLE();
+    }
+
     public int readUnsignedShort() {
         return this.a.readUnsignedShort();
     }
 
+    @Override
+    public int readUnsignedShortLE() {
+        return this.a.readUnsignedShortLE();
+    }
+
     public int readMedium() {
         return this.a.readMedium();
     }
 
+    @Override
+    public int readMediumLE() {
+        return this.a.readMediumLE();
+    }
+
     public int readUnsignedMedium() {
         return this.a.readUnsignedMedium();
     }
 
+    @Override
+    public int readUnsignedMediumLE() {
+        return this.a.readUnsignedMediumLE();
+    }
+
     public int readInt() {
         return this.a.readInt();
     }
 
+    @Override
+    public int readIntLE() {
+        return this.a.readIntLE();
+    }
+
     public long readUnsignedInt() {
         return this.a.readUnsignedInt();
     }
 
+    @Override
+    public long readUnsignedIntLE() {
+        return this.a.readUnsignedIntLE();
+    }
+
     public long readLong() {
         return this.a.readLong();
     }
 
+    @Override
+    public long readLongLE() {
+        return this.a.readLongLE();
+    }
+
     public char readChar() {
         return this.a.readChar();
     }
@@ -556,6 +708,12 @@
         return this.a.readSlice(i);
     }
 
+    @Override
+    public ByteBuf readRetainedSlice(int i) {
+        return this.a.readRetainedSlice(i);
+    }
+
+
     public ByteBuf readBytes(ByteBuf bytebuf) {
         return this.a.readBytes(bytebuf);
     }
@@ -588,6 +746,16 @@
         return this.a.readBytes(gatheringbytechannel, i);
     }
 
+    @Override
+    public CharSequence readCharSequence(int i, Charset charset) {
+        return this.a.readCharSequence(i, charset);
+    }
+
+    @Override
+    public int readBytes(FileChannel filechannel, long i, int j) throws IOException {
+        return this.a.readBytes(filechannel, i, j);
+    }
+
     public ByteBuf skipBytes(int i) {
         return this.a.skipBytes(i);
     }
@@ -604,18 +772,38 @@
         return this.a.writeShort(i);
     }
 
+    @Override
+    public ByteBuf writeShortLE(int i) {
+        return this.a.writeShortLE(i);
+    }
+
     public ByteBuf writeMedium(int i) {
         return this.a.writeMedium(i);
     }
 
+    @Override
+    public ByteBuf writeMediumLE(int i) {
+        return this.a.writeMediumLE(i);
+    }
+
     public ByteBuf writeInt(int i) {
         return this.a.writeInt(i);
     }
 
+    @Override
+    public ByteBuf writeIntLE(int i) {
+        return this.a.writeIntLE(i);
+    }
+
     public ByteBuf writeLong(long i) {
         return this.a.writeLong(i);
     }
 
+    @Override
+    public ByteBuf writeLongLE(long i) {
+        return this.a.writeLongLE(i);
+    }
+
     public ByteBuf writeChar(int i) {
         return this.a.writeChar(i);
     }
@@ -660,10 +848,18 @@
         return this.a.writeBytes(scatteringbytechannel, i);
     }
 
+    public int writeBytes(FileChannel filechannel, long i, int j) throws IOException {
+        return this.a.writeBytes(filechannel, i, j);
+    }
+
     public ByteBuf writeZero(int i) {
         return this.a.writeZero(i);
     }
 
+    public int writeCharSequence(CharSequence charsequence, Charset charset) {
+        return this.a.writeCharSequence(charsequence, charset);
+    }
+
     public int indexOf(int i, int j, byte b0) {
         return this.a.indexOf(i, j, b0);
     }
@@ -680,6 +876,23 @@
         return this.a.bytesBefore(i, j, b0);
     }
 
+    public int forEachByte(int i, int j, ByteProcessor byteprocessor) {
+        return this.a.forEachByte(i, j, byteprocessor);
+    }
+
+    public int forEachByte(ByteProcessor byteprocessor) {
+        return this.a.forEachByte(byteprocessor);
+    }
+
+    @Override
+    public int forEachByteDesc(ByteProcessor byteprocessor) {
+        return this.a.forEachByteDesc(byteprocessor);
+    }
+
+    public int forEachByteDesc(int i, int j, ByteProcessor byteprocessor) {
+        return this.a.forEachByteDesc(i, j, byteprocessor);
+    }
+
     public int forEachByte(ByteBufProcessor bytebufprocessor) {
         return this.a.forEachByte(bytebufprocessor);
     }
@@ -708,14 +921,29 @@
         return this.a.slice();
     }
 
+    @Override
+    public ByteBuf retainedSlice() {
+        return this.a.retainedSlice();
+    }
+
     public ByteBuf slice(int i, int j) {
         return this.a.slice(i, j);
     }
 
+    @Override
+    public ByteBuf retainedSlice(int i, int i1) {
+        return this.a.readRetainedSlice(i);
+    }
+
     public ByteBuf duplicate() {
         return this.a.duplicate();
     }
 
+    @Override
+    public ByteBuf retainedDuplicate() {
+        return this.a.retainedDuplicate();
+    }
+
     public int nioBufferCount() {
         return this.a.nioBufferCount();
     }
@@ -792,6 +1020,14 @@
         return this.a.retain();
     }
 
+    public ByteBuf touch() {
+        return this.a.touch();
+    }
+
+    public ByteBuf touch(Object o) {
+        return this.a.touch(o);
+    }
+
     public int refCnt() {
         return this.a.refCnt();
     }
@@ -803,16 +1039,4 @@
     public boolean release(int i) {
         return this.a.release(i);
     }
-
-    public ReferenceCounted retain(int i) {
-        return this.retain(i);
-    }
-
-    public ReferenceCounted retain() {
-        return this.retain();
-    }
-
-    public int compareTo(Object object) {
-        return this.compareTo((ByteBuf) object);
-    }
-}
+}
\ No newline at end of file
