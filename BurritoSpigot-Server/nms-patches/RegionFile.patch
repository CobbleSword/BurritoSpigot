--- a/net/minecraft/server/RegionFile.java
+++ b/net/minecraft/server/RegionFile.java
@@ -16,7 +16,7 @@
 
 public class RegionFile {
 
-    private static final byte[] a = new byte[4096];
+    private static final byte[] a = new byte[4096]; // Spigot - note: if this ever changes to not be 4096 bytes, update constructor! // PAIL: empty 4k block
     private final File b;
     private RandomAccessFile c;
     private final int[] d = new int[1024];
@@ -38,13 +38,9 @@
             int i;
 
             if (this.c.length() < 4096L) {
-                for (i = 0; i < 1024; ++i) {
-                    this.c.writeInt(0);
-                }
-
-                for (i = 0; i < 1024; ++i) {
-                    this.c.writeInt(0);
-                }
+                // Spigot - more effecient chunk zero'ing
+                this.c.write(RegionFile.a); // Spigot
+                this.c.write(RegionFile.a); // Spigot
 
                 this.g += 8192;
             }
@@ -61,11 +57,11 @@
             int j;
 
             for (j = 0; j < i; ++j) {
-                this.f.add(true);
+                this.f.add(Boolean.valueOf(true));
             }
 
-            this.f.set(0, false);
-            this.f.set(1, false);
+            this.f.set(0, Boolean.valueOf(false));
+            this.f.set(1, Boolean.valueOf(false));
             this.c.seek(0L);
 
             int k;
@@ -75,7 +71,7 @@
                 this.d[j] = k;
                 if (k != 0 && (k >> 8) + (k & 255) <= this.f.size()) {
                     for (int l = 0; l < (k & 255); ++l) {
-                        this.f.set((k >> 8) + l, false);
+                        this.f.set((k >> 8) + l, Boolean.valueOf(false));
                     }
                 }
             }
@@ -90,6 +86,45 @@
 
     }
 
+    // CraftBukkit start - This is a copy (sort of) of the method below it, make sure they stay in sync
+    public synchronized boolean chunkExists(int i, int j) {
+        if (this.d(i, j)) {
+            return false;
+        } else {
+            try {
+                int k = this.e(i, j);
+
+                if (k == 0) {
+                    return false;
+                } else {
+                    int l = k >> 8;
+                    int i1 = k & 255;
+
+                    if (l + i1 > this.f.size()) {
+                        return false;
+                    }
+
+                    this.c.seek((long) (l * 4096));
+                    int j1 = this.c.readInt();
+
+                    if (j1 > 4096 * i1 || j1 <= 0) {
+                        return false;
+                    }
+
+                    byte b0 = this.c.readByte();
+                    if (b0 == 1 || b0 == 2) {
+                        return true;
+                    }
+                }
+            } catch (IOException ioexception) {
+                return false;
+            }
+        }
+
+        return false;
+    }
+    // CraftBukkit end
+
     public synchronized DataInputStream a(int i, int j) {
         if (this.d(i, j)) {
             return null;
@@ -137,8 +172,9 @@
         }
     }
 
-    public DataOutputStream b(int i, int j) {
-        return this.d(i, j) ? null : new DataOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)));
+    public DataOutputStream b(int i, int j) { // PAIL: getChunkOutputStream
+        // PAIL: isInvalidRegion
+        return this.d(i, j) ? null : new DataOutputStream(new java.io.BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)))); // Spigot - use a BufferedOutputStream to greatly improve file write performance
     }
 
     protected synchronized void a(int i, int j, byte[] abyte, int k) {
@@ -158,22 +194,22 @@
                 int l1;
 
                 for (l1 = 0; l1 < j1; ++l1) {
-                    this.f.set(i1 + l1, true);
+                    this.f.set(i1 + l1, Boolean.valueOf(true));
                 }
 
-                l1 = this.f.indexOf(true);
+                l1 = this.f.indexOf(Boolean.valueOf(true));
                 int i2 = 0;
                 int j2;
 
                 if (l1 != -1) {
                     for (j2 = l1; j2 < this.f.size(); ++j2) {
                         if (i2 != 0) {
-                            if ((Boolean) this.f.get(j2)) {
+                            if (((Boolean) this.f.get(j2)).booleanValue()) {
                                 ++i2;
                             } else {
                                 i2 = 0;
                             }
-                        } else if ((Boolean) this.f.get(j2)) {
+                        } else if (((Boolean) this.f.get(j2)).booleanValue()) {
                             l1 = j2;
                             i2 = 1;
                         }
@@ -189,7 +225,7 @@
                     this.a(i, j, l1 << 8 | k1);
 
                     for (j2 = 0; j2 < k1; ++j2) {
-                        this.f.set(i1 + j2, false);
+                        this.f.set(i1 + j2, Boolean.valueOf(false));
                     }
 
                     this.a(i1, abyte, k);
@@ -199,7 +235,7 @@
 
                     for (j2 = 0; j2 < k1; ++j2) {
                         this.c.write(RegionFile.a);
-                        this.f.add(false);
+                        this.f.add(Boolean.valueOf(false));
                     }
 
                     this.g += 4096 * k1;
