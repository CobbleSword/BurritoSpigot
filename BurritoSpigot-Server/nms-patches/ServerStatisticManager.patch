--- a/net/minecraft/server/ServerStatisticManager.java
+++ b/net/minecraft/server/ServerStatisticManager.java
@@ -13,8 +13,8 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
+import java.util.Map.Entry;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -31,6 +31,14 @@
     public ServerStatisticManager(MinecraftServer minecraftserver, File file) {
         this.c = minecraftserver;
         this.d = file;
+        // Spigot start
+        for ( String name : org.spigotmc.SpigotConfig.forcedStats.keySet() )
+        {
+            StatisticWrapper wrapper = new StatisticWrapper();
+            wrapper.a( org.spigotmc.SpigotConfig.forcedStats.get( name ) );
+            a.put( StatisticList.getStatistic( name ), wrapper );
+        }
+        // Spigot end
     }
 
     public void a() {
@@ -39,24 +47,26 @@
                 this.a.clear();
                 this.a.putAll(this.a(FileUtils.readFileToString(this.d)));
             } catch (IOException ioexception) {
-                ServerStatisticManager.b.error("Couldn't read statistics file " + this.d, ioexception);
+                ServerStatisticManager.b.error("Couldn\'t read statistics file " + this.d, ioexception);
             } catch (JsonParseException jsonparseexception) {
-                ServerStatisticManager.b.error("Couldn't parse statistics file " + this.d, jsonparseexception);
+                ServerStatisticManager.b.error("Couldn\'t parse statistics file " + this.d, jsonparseexception);
             }
         }
 
     }
 
     public void b() {
+        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         try {
             FileUtils.writeStringToFile(this.d, a(this.a));
         } catch (IOException ioexception) {
-            ServerStatisticManager.b.error("Couldn't save stats", ioexception);
+            ServerStatisticManager.b.error("Couldn\'t save stats", ioexception);
         }
 
     }
 
     public void setStatistic(EntityHuman entityhuman, Statistic statistic, int i) {
+        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         int j = statistic.d() ? this.getStatisticValue(statistic) : 0;
 
         super.setStatistic(entityhuman, statistic, i);
@@ -64,14 +74,14 @@
         if (statistic.d() && j == 0 && i > 0) {
             this.g = true;
             if (this.c.aB()) {
-                this.c.getPlayerList().sendMessage(new ChatMessage("chat.type.achievement", new Object[]{entityhuman.getScoreboardDisplayName(), statistic.j()}));
+                this.c.getPlayerList().sendMessage(new ChatMessage("chat.type.achievement", new Object[] { entityhuman.getScoreboardDisplayName(), statistic.j()}));
             }
         }
 
         if (statistic.d() && j > 0 && i == 0) {
             this.g = true;
             if (this.c.aB()) {
-                this.c.getPlayerList().sendMessage(new ChatMessage("chat.type.achievement.taken", new Object[]{entityhuman.getScoreboardDisplayName(), statistic.j()}));
+                this.c.getPlayerList().sendMessage(new ChatMessage("chat.type.achievement.taken", new Object[] { entityhuman.getScoreboardDisplayName(), statistic.j()}));
             }
         }
 
@@ -113,8 +123,8 @@
 
                         if (jsonobject1.has("progress") && statistic.l() != null) {
                             try {
-                                Constructor constructor = statistic.l().getConstructor();
-                                IJsonStatistic ijsonstatistic = (IJsonStatistic) constructor.newInstance();
+                                Constructor constructor = statistic.l().getConstructor(new Class[0]);
+                                IJsonStatistic ijsonstatistic = (IJsonStatistic) constructor.newInstance(new Object[0]);
 
                                 ijsonstatistic.a(jsonobject1.get("progress"));
                                 statisticwrapper.a(ijsonstatistic);
@@ -126,7 +136,7 @@
 
                     hashmap.put(statistic, statisticwrapper);
                 } else {
-                    ServerStatisticManager.b.warn("Invalid statistic in " + this.d + ": Don't know what " + (String) entry.getKey() + " is");
+                    ServerStatisticManager.b.warn("Invalid statistic in " + this.d + ": Don\'t know what " + (String) entry.getKey() + " is");
                 }
             }
 
@@ -144,17 +154,17 @@
             if (((StatisticWrapper) entry.getValue()).b() != null) {
                 JsonObject jsonobject1 = new JsonObject();
 
-                jsonobject1.addProperty("value", ((StatisticWrapper) entry.getValue()).a());
+                jsonobject1.addProperty("value", Integer.valueOf(((StatisticWrapper) entry.getValue()).a()));
 
                 try {
                     jsonobject1.add("progress", ((StatisticWrapper) entry.getValue()).b().a());
                 } catch (Throwable throwable) {
-                    ServerStatisticManager.b.warn("Couldn't save statistic " + ((Statistic) entry.getKey()).e() + ": error serializing progress", throwable);
+                    ServerStatisticManager.b.warn("Couldn\'t save statistic " + ((Statistic) entry.getKey()).e() + ": error serializing progress", throwable);
                 }
 
                 jsonobject.add(((Statistic) entry.getKey()).name, jsonobject1);
             } else {
-                jsonobject.addProperty(((Statistic) entry.getKey()).name, ((StatisticWrapper) entry.getValue()).a());
+                jsonobject.addProperty(((Statistic) entry.getKey()).name, Integer.valueOf(((StatisticWrapper) entry.getValue()).a()));
             }
         }
 
@@ -183,7 +193,7 @@
             while (iterator.hasNext()) {
                 Statistic statistic = (Statistic) iterator.next();
 
-                hashmap.put(statistic, this.getStatisticValue(statistic));
+                hashmap.put(statistic, Integer.valueOf(this.getStatisticValue(statistic)));
             }
         }
 
@@ -198,7 +208,7 @@
             Achievement achievement = (Achievement) iterator.next();
 
             if (this.hasAchievement(achievement)) {
-                hashmap.put(achievement, this.getStatisticValue(achievement));
+                hashmap.put(achievement, Integer.valueOf(this.getStatisticValue(achievement)));
                 this.e.remove(achievement);
             }
         }
