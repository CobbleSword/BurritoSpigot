--- a/net/minecraft/server/StructureGenerator.java
+++ b/net/minecraft/server/StructureGenerator.java
@@ -18,14 +18,14 @@
 
     protected final void a(World world, final int i, final int j, int k, int l, ChunkSnapshot chunksnapshot) {
         this.a(world);
-        if (!this.e.containsKey(ChunkCoordIntPair.a(i, j))) {
+        if (!this.e.containsKey(Long.valueOf(ChunkCoordIntPair.a(i, j)))) {
             this.b.nextInt();
 
             try {
                 if (this.a(i, j)) {
                     StructureStart structurestart = this.b(i, j);
 
-                    this.e.put(ChunkCoordIntPair.a(i, j), structurestart);
+                    this.e.put(Long.valueOf(ChunkCoordIntPair.a(i, j)), structurestart);
                     this.a(i, j, structurestart);
                 }
 
@@ -33,7 +33,7 @@
                 CrashReport crashreport = CrashReport.a(throwable, "Exception preparing structure feature");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Feature being prepared");
 
-                crashreportsystemdetails.a("Is feature chunk", new Callable<String>() {
+                crashreportsystemdetails.a("Is feature chunk", new Callable() {
                     public String a() throws Exception {
                         return StructureGenerator.this.a(i, j) ? "True" : "False";
                     }
@@ -42,8 +42,8 @@
                         return this.a();
                     }
                 });
-                crashreportsystemdetails.a("Chunk location", (Object) String.format("%d,%d", i, j));
-                crashreportsystemdetails.a("Chunk pos hash", new Callable<String>() {
+                crashreportsystemdetails.a("Chunk location", (Object) String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
+                crashreportsystemdetails.a("Chunk pos hash", new Callable() {
                     public String a() throws Exception {
                         return String.valueOf(ChunkCoordIntPair.a(i, j));
                     }
@@ -52,7 +52,7 @@
                         return this.a();
                     }
                 });
-                crashreportsystemdetails.a("Structure type", new Callable<String>() {
+                crashreportsystemdetails.a("Structure type", new Callable() {
                     public String a() throws Exception {
                         return StructureGenerator.this.getClass().getCanonicalName();
                     }
@@ -88,6 +88,7 @@
     }
 
     public boolean b(BlockPosition blockposition) {
+        if (this.c == null) return false; // PaperSpigot
         this.a(this.c);
         return this.c(blockposition) != null;
     }
@@ -115,6 +116,7 @@
     }
 
     public boolean a(World world, BlockPosition blockposition) {
+        if (this.c == null) return false; // PaperSpigot
         this.a(world);
         Iterator iterator = this.e.values().iterator();
 
@@ -195,7 +197,15 @@
 
     private void a(World world) {
         if (this.d == null) {
+            // Spigot Start
+            if ( world.spigotConfig.saveStructureInfo && !this.a().equals( "Mineshaft" ) )
+            {
             this.d = (PersistentStructure) world.a(PersistentStructure.class, this.a());
+            } else
+            {
+                this.d = new PersistentStructure( this.a() );
+            }
+            // Spigot End
             if (this.d == null) {
                 this.d = new PersistentStructure(this.a());
                 world.a(this.a(), (PersistentBase) this.d);
@@ -216,7 +226,7 @@
                             StructureStart structurestart = WorldGenFactory.a(nbttagcompound1, world);
 
                             if (structurestart != null) {
-                                this.e.put(ChunkCoordIntPair.a(i, j), structurestart);
+                                this.e.put(Long.valueOf(ChunkCoordIntPair.a(i, j)), structurestart);
                             }
                         }
                     }
