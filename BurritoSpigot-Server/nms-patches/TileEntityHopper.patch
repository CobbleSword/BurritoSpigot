--- a/net/minecraft/server/TileEntityHopper.java
+++ b/net/minecraft/server/TileEntityHopper.java
@@ -3,12 +3,48 @@
 import java.util.Iterator;
 import java.util.List;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
+import net.techcable.tacospigot.HopperHelper; // TacoSpigot
+
 public class TileEntityHopper extends TileEntityContainer implements IHopper, IUpdatePlayerListBox {
 
     private ItemStack[] items = new ItemStack[5];
     private String f;
     private int g = -1;
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public TileEntityHopper() {}
 
     public void a(NBTTagCompound nbttagcompound) {
@@ -120,7 +156,7 @@
     }
 
     public int getMaxStackSize() {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean a(EntityHuman entityhuman) {
@@ -160,12 +196,16 @@
                 }
 
                 if (flag) {
-                    this.d(8);
+                    this.d(world.spigotConfig.hopperTransfer); // Spigot
                     this.update();
                     return true;
                 }
             }
-
+            // PaperSpigot start
+            if (world.paperSpigotConfig.useHopperCheck && !world.tacoSpigotConfig.isHopperPushBased && !this.n()) { // TacoSpigot - dont use hopper check in push mode
+                this.d(world.spigotConfig.hopperCheck);
+            }
+            // PaperSpigot end
             return false;
         } else {
             return false;
@@ -187,6 +227,12 @@
         return true;
     }
 
+    // TacoSpigot start
+    public boolean canAcceptItems() {
+        return !this.n() && !this.q() && BlockHopper.f(this.u());
+    }
+    // TacoSpigot end
+
     private boolean q() {
         ItemStack[] aitemstack = this.items;
         int i = aitemstack.length;
@@ -203,7 +249,9 @@
     }
 
     private boolean r() {
-        IInventory iinventory = this.H();
+        // TacoSpigot start - Don't use inefficient H() which does another bounding box search
+        IInventory iinventory = HopperHelper.getInventory(getWorld(), getPosition().shift(BlockHopper.b(this.u())));
+        // TacoSpigot end
 
         if (iinventory == null) {
             return false;
@@ -216,13 +264,50 @@
                 for (int i = 0; i < this.getSize(); ++i) {
                     if (this.getItem(i) != null) {
                         ItemStack itemstack = this.getItem(i).cloneItemStack();
-                        ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
+                        // ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
+
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
+                        // TacoSpigot start - add an option to turn of InventoryMoveItemEvent
+                        final org.bukkit.inventory.ItemStack stack;
+                        if (HopperHelper.isFireInventoryMoveItemEvent(this)) {
+                        // TacoSpigot end
+
+                        Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof InventoryLargeChest) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+                        } else {
+                            destinationInventory = iinventory.getOwner().getInventory();
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(this.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        this.getWorld().getServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            this.setItem(i, itemstack);
+                            this.d(world.spigotConfig.hopperTransfer); // Spigot
+                            return false;
+                        }
+                        // TacoSpigot start
+                        stack = event.getItem();
+                        // handle cases where the event is not fired
+                        } else {
+                            stack = oitemstack;
+                        }
+                        int origCount = stack.getAmount(); // Spigot
+                        ItemStack itemstack1 = addItem(iinventory, CraftItemStack.asNMSCopy(stack), enumdirection);
+                        // TacoSpigot end
 
                         if (itemstack1 == null || itemstack1.count == 0) {
-                            iinventory.update();
+                            if (stack.equals(oitemstack)) { // TacoSpigot - event.getItem() -> stack
+                                iinventory.update();
+                            } else {
+                                this.setItem(i, itemstack);
+                            }
+                            // CraftBukkit end
                             return true;
                         }
-
+                        itemstack.count -= origCount - itemstack1.count; // Spigot
                         this.setItem(i, itemstack);
                     }
                 }
@@ -282,9 +367,21 @@
         return true;
     }
 
+    // TacoSpigot start - Split methods, one that pushes and one that pulls
+    @Deprecated
     public static boolean a(IHopper ihopper) {
-        IInventory iinventory = b(ihopper);
+        IInventory iinventory;
+        if (ihopper.getWorld().tacoSpigotConfig.isHopperPushBased && ihopper instanceof TileEntityHopper) {
+            BlockPosition pos = ((TileEntityHopper) ihopper).getPosition().up(); // Only pull from a above, because everything else comes to us
+            iinventory = HopperHelper.getInventory(ihopper.getWorld(), pos);
+        } else {
+            iinventory = b(ihopper); // Use old behavior for BB entity searching
+        }
+        return acceptItem(ihopper, iinventory);
+    }
 
+    public static boolean acceptItem(IHopper ihopper, IInventory iinventory) {
+        // TacoSpigot end
         if (iinventory != null) {
             EnumDirection enumdirection = EnumDirection.DOWN;
 
@@ -310,7 +407,7 @@
                     }
                 }
             }
-        } else {
+        } else if (!ihopper.getWorld().tacoSpigotConfig.isHopperPushBased || !(ihopper instanceof TileEntityHopper)) { // TacoSpigot - only search for entities in 'pull mode'
             Iterator iterator = a(ihopper.getWorld(), ihopper.A(), ihopper.B() + 1.0D, ihopper.C()).iterator();
 
             while (iterator.hasNext()) {
@@ -330,12 +427,55 @@
 
         if (itemstack != null && b(iinventory, itemstack, i, enumdirection)) {
             ItemStack itemstack1 = itemstack.cloneItemStack();
-            ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
+            // ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfig.hopperAmount)); // Spigot
+            // TacoSpigot start - add an option to turn of InventoryMoveItemEvent
+            final org.bukkit.inventory.ItemStack stack;
+            if (HopperHelper.isFireInventoryMoveItemEvent(ihopper)) {
+            // TacoSpigot end
+
+            Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (iinventory instanceof InventoryLargeChest) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+            } else {
+                sourceInventory = iinventory.getOwner().getInventory();
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), ihopper.getOwner().getInventory(), false);
+
+            ihopper.getWorld().getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                iinventory.setItem(i, itemstack1);
+
+                if (ihopper instanceof TileEntityHopper) {
+                    ((TileEntityHopper) ihopper).d(ihopper.getWorld().spigotConfig.hopperTransfer); // Spigot
+                } else if (ihopper instanceof EntityMinecartHopper) {
+                    ((EntityMinecartHopper) ihopper).m(ihopper.getWorld().spigotConfig.hopperTransfer / 2); // Spigot
+                }
+                return false;
+            }
+            // TacoSpigot start
+            stack = event.getItem();
+            // handle cases where the event is not fired
+            } else {
+                stack = oitemstack;
+            }
+            int origCount = stack.getAmount(); // Spigot
+            ItemStack itemstack2 = addItem(ihopper, CraftItemStack.asNMSCopy(stack), null);
+            // TacoSpigot end
 
             if (itemstack2 == null || itemstack2.count == 0) {
-                iinventory.update();
+                if (stack.equals(oitemstack)) {
+                    iinventory.update();
+                } else {
+                    iinventory.setItem(i, itemstack1);
+                }
+                // CraftBukkit end
                 return true;
             }
+            itemstack1.count -= origCount - itemstack2.count; // Spigot
 
             iinventory.setItem(i, itemstack1);
         }
@@ -349,6 +489,13 @@
         if (entityitem == null) {
             return false;
         } else {
+            // CraftBukkit start
+            InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+            entityitem.world.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return false;
+            }
+            // CraftBukkit end
             ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
             ItemStack itemstack1 = addItem(iinventory, itemstack, (EnumDirection) null);
 
@@ -418,7 +565,7 @@
                     TileEntityHopper tileentityhopper = (TileEntityHopper) iinventory;
 
                     if (tileentityhopper.o()) {
-                        tileentityhopper.d(8);
+                        tileentityhopper.d(tileentityhopper.world.spigotConfig.hopperTransfer); // Spigot
                     }
 
                     iinventory.update();
@@ -451,6 +598,7 @@
         int j = MathHelper.floor(d1);
         int k = MathHelper.floor(d2);
         BlockPosition blockposition = new BlockPosition(i, j, k);
+        if ( !world.isLoaded( blockposition ) ) return null; // Spigot
         Block block = world.getType(blockposition).getBlock();
 
         if (block.isTileEntity()) {
@@ -475,6 +623,18 @@
         return (IInventory) object;
     }
 
+    // TacoSpigot start
+    public AxisAlignedBB getHopperLookupBoundingBox() {
+        // Change this if b(IHopper) ever changes
+        return getHopperLookupBoundingBox(this.A(), this.B() + 1.0D, this.C());
+    }
+
+    private static AxisAlignedBB getHopperLookupBoundingBox(double d0, double d1, double d2) {
+        // Change this if the above ever changes
+        return new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D);
+    }
+    // TacoSpigot end
+
     private static boolean a(ItemStack itemstack, ItemStack itemstack1) {
         return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.count > itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1)));
     }
