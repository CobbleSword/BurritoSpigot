--- NetworkManager.java
+++ NetworkManager.java
@@ -68,11 +72,16 @@
     private final Queue<NetworkManager.QueuedPacket> i = Queues.newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock j = new ReentrantReadWriteLock();
     public Channel channel;
-    private SocketAddress l;
+    // Spigot Start // PAIL
+    public SocketAddress l;
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
     private PacketListener m;
     private IChatBaseComponent n;
-    private boolean isEncrypted;
-    private boolean isDisconnectionHandled;
+    private boolean o;
+    private boolean p;
 
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
@@ -253,7 +269,7 @@
     }
 
     public void a(SecretKey secretkey) {
-        this.isEncrypted = true;
+        this.o = true;
         this.channel.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(MinecraftEncryption.a(2, secretkey)));
         this.channel.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(MinecraftEncryption.a(1, secretkey)));
     }
@@ -305,13 +321,14 @@
 
     public void l() {
         if (this.channel != null && !this.channel.isOpen()) {
-            if (!this.isDisconnectionHandled) {
-                this.isDisconnectionHandled = true;
+            if (!this.p) {
+                this.p = true;
                 if (this.j() != null) {
                     this.getPacketListener().a(this.j());
                 } else if (this.getPacketListener() != null) {
                     this.getPacketListener().a(new ChatComponentText("Disconnected"));
                 }
+                this.i.clear(); // Free up packet queue.
             } else {
                 NetworkManager.g.warn("handleDisconnection() called twice");
             }
