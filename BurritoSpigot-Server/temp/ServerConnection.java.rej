--- ServerConnection.java
+++ ServerConnection.java
@@ -59,8 +59,8 @@
     };
     private final MinecraftServer f;
     public volatile boolean d;
-    private final List<ChannelFuture> listeningChannels = Collections.synchronizedList(Lists.newArrayList());
-    private final List<NetworkManager> connectedChannels = Collections.synchronizedList(Lists.newArrayList());
+    private final List<ChannelFuture> g = Collections.synchronizedList(Lists.<ChannelFuture>newArrayList());
+    private final List<NetworkManager> h = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
 
     public ServerConnection(MinecraftServer minecraftserver) {
         this.f = minecraftserver;
@@ -68,9 +68,9 @@
     }
 
     public void a(InetAddress inetaddress, int i) throws IOException {
-        List list = this.listeningChannels;
+        List list = this.g;
 
-        synchronized (this.listeningChannels) {
+        synchronized (this.g) {
             Class oclass;
             LazyInitVar lazyinitvar;
 
@@ -84,10 +84,10 @@
                 ServerConnection.e.info("Using default channel type");
             }
 
-            this.listeningChannels.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>() {
+            this.g.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer() {
                 protected void initChannel(Channel channel) throws Exception {
                     try {
-                        channel.config().setOption(ChannelOption.TCP_NODELAY, true);
+                        channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
                     } catch (ChannelException channelexception) {
                         ;
                     }
@@ -95,7 +95,7 @@
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
                     NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
 
-                    ServerConnection.this.connectedChannels.add(networkmanager);
+                    ServerConnection.this.h.add(networkmanager);
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.a((PacketListener) (new HandshakeListener(ServerConnection.this.f, networkmanager)));
                 }
@@ -105,7 +105,7 @@
 
     public void b() {
         this.d = false;
-        Iterator iterator = this.listeningChannels.iterator();
+        Iterator iterator = this.g.iterator();
 
         while (iterator.hasNext()) {
             ChannelFuture channelfuture = (ChannelFuture) iterator.next();
@@ -120,16 +120,27 @@
     }
 
     public void c() {
-        List list = this.connectedChannels;
+        List list = this.h;
 
-        synchronized (this.connectedChannels) {
-            Iterator iterator = this.connectedChannels.iterator();
+        synchronized (this.h) {
+            // Spigot Start
+            // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+            if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
+            {
+                Collections.shuffle( this.h );
+            }
+            // Spigot End
+            Iterator iterator = this.h.iterator();
 
             while (iterator.hasNext()) {
                 final NetworkManager networkmanager = (NetworkManager) iterator.next();
 
                 if (!networkmanager.h()) {
                     if (!networkmanager.g()) {
+                        // Spigot Start
+                        // Fix a race condition where a NetworkManager could be unregistered just before connection.
+                        if (networkmanager.preparing) continue;
+                        // Spigot End
                         iterator.remove();
                         networkmanager.l();
                     } else {
